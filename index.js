/* Generated by es6-transpiler v 0.7.14-2 */
/**
 * @fileoverview WAVE audio library element: a web audio granular engine.
 * @author Karim.Barkati@ircam.fr, Norbert.Schnell@ircam.fr, Victor.Saiz@ircam.fr
 * @version 2.1.0
 */
"use strict";

var Metronome = (function(){var DP$0 = Object.defineProperty;
  function Metronome() {var name = arguments[0];if(name === void 0)name = "unnamed";
    this.period = 1 // in sec
    this.attack = 0.002;
    this.decay = 0.098;

    this.__gainNode = audioContext.createGain();

    this.__envNode = audioContext.createGain();
    this.__envNode.connect(this.__gainNode);

    this.__osc = audioContext.createOscillator();
    this.__osc.frequency.value = 600;
    this.__osc.start(0);
    this.__osc.connect(this.__envNode);
  }Object.defineProperties(Metronome.prototype, {gain: {"get": gain$get$0, "set": gain$set$0, "configurable": true, "enumerable": true}, frequency: {"get": frequency$get$0, "set": frequency$set$0, "configurable": true, "enumerable": true}});DP$0(Metronome, "prototype", {"configurable": false, "enumerable": false, "writable": false});

  Metronome.prototype.trigger = function(time) {
    if (period < 0.1) {
      if (period < 0.05)
        period = 0.05;

      decay = period - attack;
    }

    this.__envNode.gain.setValueAtTime(0.0, time);
    this.__envNode.gain.linearRampToValueAtTime(1.0, time + 0.002);
    this.__envNode.gain.exponentialRampToValueAtTime(0.000001, time + 0.098);
  }

  Metronome.prototype.resetAndReturnNextTime = function(time) {
    this.__nextEventTime = time;
    return time;
  }

  Metronome.prototype.makeEventAndReturnNextTime = function() {
    this.trigger(this.__nextEventTime);
    this.__nextEventTime = this.__nextEventTime + this.period;
    return this.__nextEventTime;
  }

 function gain$set$0(value) {
    this.__gainNode.gain.value = value;
    //console.log(gain);
  }

  function gain$get$0() {
    return this.__gainNode.gain.value;
  }

  function frequency$set$0(value) {
    this.__osc.frequency.value = value;
    //console.log(gain);
  }

  function frequency$get$0() {
    return this.__osc.frequency.value;
  }

  Metronome.prototype.connect = function(target) {
    this.__gainNode.connect(target);
    return this;
  }

  Metronome.prototype.disconnect = function(output) {
    this.__gainNode.disconnect(output);
    return this;
  }
;return Metronome;})();

module.exports = Metronome;
