/* Generated by es6-transpiler v 0.7.14-2 */var DP$0 = Object.defineProperty;/**
 * @fileoverview WAVE audio library element: a web audio granular engine.
 * @author Karim.Barkati@ircam.fr, Norbert.Schnell@ircam.fr, Victor.Saiz@ircam.fr
 * @version 2.1.0
 */
"use strict";

var Scheduled = require("../scheduler/scheduled");
//var Transported = require("../transporter/transported");

var ScheduledMetronome = (function(super$0){var MIXIN$0 = function(t,s){for(var p in s){if(s.hasOwnProperty(p)){DP$0(t,p,Object.getOwnPropertyDescriptor(s,p));}}return t};function ScheduledMetronome() {super$0.apply(this, arguments)}MIXIN$0(ScheduledMetronome, super$0);ScheduledMetronome.prototype = Object.create(super$0.prototype, {"constructor": {"value": ScheduledMetronome, "configurable": true, "writable": true} });DP$0(ScheduledMetronome, "prototype", {"configurable": false, "enumerable": false, "writable": false});
  ScheduledMetronome.prototype.reset = function(time) {
    return time;
  }

  ScheduledMetronome.prototype.execute = function(time) {
    return this.parent.trigger(time);
  }
;return ScheduledMetronome;})(Scheduled);

var Metronome = (function(){
  function Metronome() {var name = arguments[0];if(name === void 0)name = "metronome";
    this.name = name;

    this.period = 1; // in sec
    this.attack = 0.002;
    this.release = 0.098;

    this.__gainNode = audioContext.createGain();

    this.__envNode = audioContext.createGain();
    this.__envNode.gain.value = 0.0;
    this.__envNode.connect(this.__gainNode);

    this.__osc = audioContext.createOscillator();
    this.__osc.frequency.value = 600;
    this.__osc.start(0);
    this.__osc.connect(this.__envNode);

    this.scheduled = new ScheduledMetronome(this);
  }Object.defineProperties(Metronome.prototype, {gain: {"get": gain$get$0, "set": gain$set$0, "configurable": true, "enumerable": true}, frequency: {"get": frequency$get$0, "set": frequency$set$0, "configurable": true, "enumerable": true}});DP$0(Metronome, "prototype", {"configurable": false, "enumerable": false, "writable": false});

  Metronome.prototype.trigger = function(time) {
    var attack = this.attack;
    var release = this.release;
    var period = this.period;

    if (period < this.attack + this.release) {
      var scale = period / (this.attack + this.release);
      attack *= scale;
      release *= scale;
    }

    this.__envNode.gain.setValueAtTime(0.0, time);
    this.__envNode.gain.linearRampToValueAtTime(1.0, time + attack);
    this.__envNode.gain.exponentialRampToValueAtTime(0.0000001, time + attack + release);

    return time + period;
  }

  function gain$set$0(value) {
    this.__gainNode.gain.value = value;
  }

  function gain$get$0() {
    return this.__gainNode.gain.value;
  }

  function frequency$set$0(value) {
    this.__osc.frequency.value = value;
  }

  function frequency$get$0() {
    return this.__osc.frequency.value;
  }

  Metronome.prototype.connect = function(target) {
    this.__gainNode.connect(target);
    return this;
  }

  Metronome.prototype.disconnect = function(output) {
    this.__gainNode.disconnect(output);
    return this;
  }
;return Metronome;})();

module.exports = Metronome;