"use strict";

var _babelHelpers = require("babel-runtime/helpers")["default"];

var defaultAudioContext = require("./audio-context");

/**
 * @class TimeEngine
 * @classdesc Base class for time engines
 *
 * Time engines are components that generate more or less regular audio events and/or playback a media stream.
 * They implement one or multiple interfaces to be synchronized by a master such as a scheduler, a transport or a play-control.
 * The provided interfaces are "scheduled", "transported", and "play-controlled".
 *
 * In the "scheduled" interface the engine implements a method "advanceTime" that is called by the master (usually the scheduler)
 * and returns the delay until the next call of "advanceTime". The master provides the engine with a function "resetNextTime"
 * to reschedule the next call to another time.
 *
 * In the "transported" interface the master (usually a transport) first calls the method "syncPosition" that returns the position
 * of the first event generated by the engine regarding the playing direction (sign of the speed argument). Events are generated
 * through the method "advancePosition" that returns the position of the next event generated through "advancePosition".
 *
 * In the "speed-controlled" interface the engine is controlled by the method "syncSpeed".
 *
 * For all interfaces the engine is provided with the attribute getters "currentTime" and "currentPosition" (for the case that the master
 * does not implement these attribute getters, the base class provides default implementations).
 */

var TimeEngine = (function () {

  /**
   * @constructor
   */

  function TimeEngine() {
    var audioContext = arguments[0] === undefined ? defaultAudioContext : arguments[0];

    _babelHelpers.classCallCheck(this, TimeEngine);

    this.audioContext = audioContext;

    /**
     * Current master
     * @type {Object}
     */
    this.master = null;

    /**
     * Interface currently used
     * @type {String}
     */
    this["interface"] = null;

    /**
     * Output audio node
     * @type {Object}
     */
    this.outputNode = null;
  }

  _babelHelpers.prototypeProperties(TimeEngine, null, {
    currentTime: {

      /**
       * Get the time engine's current master time
       * @type {Function}
       *
       * This function provided by the master.
       */

      get: function () {
        return this.audioContext.currentTime;
      },
      configurable: true
    },
    currentPosition: {

      /**
       * Get the time engine's current master position
       * @type {Function}
       *
       * This function provided by the master.
       */

      get: function () {
        return 0;
      },
      configurable: true
    },
    resetNextTime: {

      /**
       * Function provided by the scheduler to reset the engine's next time
       * @param {Number} time new engine time (immediately if not specified)
       */

      value: function resetNextTime() {
        var time = arguments[0] === undefined ? null : arguments[0];
      },
      writable: true,
      configurable: true
    },
    resetNextPosition: {

      /**
       * Function provided by the transport to reset the next position or to request resynchronizing the engine's position
       * @param {Number} position new engine position (will call syncPosition with the current position if not specified)
       */

      value: function resetNextPosition() {
        var position = arguments[0] === undefined ? null : arguments[0];
      },
      writable: true,
      configurable: true
    },
    __setGetters: {
      value: function __setGetters(getCurrentTime, getCurrentPosition) {
        if (getCurrentTime) {
          Object.defineProperty(this, "currentTime", {
            configurable: true,
            get: getCurrentTime
          });
        }

        if (getCurrentPosition) {
          Object.defineProperty(this, "currentPosition", {
            configurable: true,
            get: getCurrentPosition
          });
        }
      },
      writable: true,
      configurable: true
    },
    __deleteGetters: {
      value: function __deleteGetters() {
        delete this.currentTime;
        delete this.currentPosition;
      },
      writable: true,
      configurable: true
    },
    implementsScheduled: {

      /**
       * Check whether the time engine implements the scheduled interface
       **/

      value: function implementsScheduled() {
        return this.advanceTime && this.advanceTime instanceof Function;
      },
      writable: true,
      configurable: true
    },
    implementsTransported: {

      /**
       * Check whether the time engine implements the transported interface
       **/

      value: function implementsTransported() {
        return this.syncPosition && this.syncPosition instanceof Function && this.advancePosition && this.advancePosition instanceof Function;
      },
      writable: true,
      configurable: true
    },
    implementsSpeedControlled: {

      /**
       * Check whether the time engine implements the speed-controlled interface
       **/

      value: function implementsSpeedControlled() {
        return this.syncSpeed && this.syncSpeed instanceof Function;
      },
      writable: true,
      configurable: true
    },
    setScheduled: {
      value: function setScheduled(master, resetNextTime, getCurrentTime, getCurrentPosition) {
        this.master = master;
        this["interface"] = "scheduled";

        this.__setGetters(getCurrentTime, getCurrentPosition);

        if (resetNextTime) this.resetNextTime = resetNextTime;
      },
      writable: true,
      configurable: true
    },
    setTransported: {
      value: function setTransported(master, resetNextPosition, getCurrentTime, getCurrentPosition) {
        this.master = master;
        this["interface"] = "transported";

        this.__setGetters(getCurrentTime, getCurrentPosition);

        if (resetNextPosition) this.resetNextPosition = resetNextPosition;
      },
      writable: true,
      configurable: true
    },
    setSpeedControlled: {
      value: function setSpeedControlled(master, getCurrentTime, getCurrentPosition) {
        this.master = master;
        this["interface"] = "speed-controlled";

        this.__setGetters(getCurrentTime, getCurrentPosition);
      },
      writable: true,
      configurable: true
    },
    resetInterface: {
      value: function resetInterface() {
        this.__deleteGetters();

        delete this.resetNextTime;
        delete this.resetNextPosition;

        this.master = null;
        this["interface"] = null;
      },
      writable: true,
      configurable: true
    },
    connect: {

      /**
       * Connect audio node
       * @param {Object} target audio node
       */

      value: function connect(target) {
        this.outputNode.connect(target);
        return this;
      },
      writable: true,
      configurable: true
    },
    disconnect: {

      /**
       * Disconnect audio node
       * @param {Number} connection connection to be disconnected
       */

      value: function disconnect(connection) {
        this.outputNode.disconnect(connection);
        return this;
      },
      writable: true,
      configurable: true
    }
  });

  return TimeEngine;
})();

module.exports = TimeEngine;
/* written in ECMAscript 6 */
/**
 * @fileoverview WAVE audio time engine base class
 * @author Norbert.Schnell@ircam.fr, Victor.Saiz@ircam.fr, Karim.Barkati@ircam.fr
 */
//# sourceMappingURL=data:application/json;base64,