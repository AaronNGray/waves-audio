(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* Generated by es6-transpiler v 0.7.14-2 */
/**
 * @fileoverview WAVE audio library element: a web audio granular engine.
 * @author Karim.Barkati@ircam.fr, Norbert.Schnell@ircam.fr, Victor.Saiz@ircam.fr
 * @version 2.1.0
 */

"use strict";

var GranularEngine = (function(){var DP$0 = Object.defineProperty;

  /**
   * Constructor.
   * @public
   * @chainable
   */
  function GranularEngine(audioBuffer, optName){
    
    if (!this || this === window)
      throw new SyntaxError("You seem to have forgotten the new operator; Shame on you!");

    this.period = 0.01 // in sec
    this.position = 0 // buffer position (in sec), assumed not normalized
    this.positionVariation = 0.003
    this.duration = 0.2
    this.resampling = 0
    this.resamplingVariation = 0
    this.centered = false
    this.maxGrainAmplitude = 0.2
    this.setBuffer(audioBuffer);
    this.name = optName;
    this.gain = 1;
    
    // Create web audio nodes, relying on the web audio context.
    this.gainNode = audioContext.createGain();
    this.outputNode = audioContext.createGain(); // dummy node to provide a web audio-like output node

  }DP$0(GranularEngine, "prototype", {"configurable": false, "enumerable": false, "writable": false});

  // Private methods
  // ---------------

  /**
   * Grain factory.
   * @private
   */
  GranularEngine.prototype.__makeNextGrain = function() {
    var source = audioContext.createBufferSource();
    var resamplingRate = this.__computeResamplingRate();
    var grainDuration = this.duration / resamplingRate;
    var grainPosition = this.__computeGrainPosition(grainDuration);
    var grainEnvelopeNode = this.__makeGrainEnvelope(grainDuration);

    source.buffer = this.buffer;
    source.playbackRate.value = resamplingRate;

    source.connect(grainEnvelopeNode);
    grainEnvelopeNode.connect(this.gainNode);

    // args: schedule time, buffer offset, duration (all in seconds)
    source.start(this.nextEventTime, grainPosition, this.duration);
  }

  /**
   * Compute grain position from direct interaction or external transporter delegation.
   * @private
   */
  GranularEngine.prototype.__computeGrainPosition = function(grainDuration) {
    var grainPosition;

    // Update grain position when slaved, from last synchronization
    if (this.isTransportable) {
      var position = this.transporter.timebase.getPositionAtTime(this.nextEventTime);

      if (position >= 0 && position <= this.bufferDuration) {
        this.position = position;
      } else {
        console.log("Grain position is out of bounds");
        if (this.hasOwnProperty("notifyEnd")) {
          this.notifyEnd();
        }
      }
    }

    grainPosition = this.__randomizeGrainPosition(this.position % this.bufferDuration);
    if (this.centered) grainPosition -= 0.5 * grainDuration;

    return grainPosition;
  }

  /**
   * Randomize position to break phasing artifacts, except when playing at normal speed.
   * @private
   */
  GranularEngine.prototype.__randomizeGrainPosition = function(grainPosition) {
    var randomGrainShift = (Math.random() - 0.5) * 2.0 * this.positionVariation;

    return (grainPosition + randomGrainShift) % this.bufferDuration;
  }


  /**
   * Simple triangle envelope generator for grains.
   * @todo hanning envelope (or gaussian)
   * @private
   */
  GranularEngine.prototype.__makeGrainEnvelope = function(grainDuration) {
    var envelopeNode = audioContext.createGain();
    var attackDuration = 0.5 * grainDuration;
    var releaseDuration = 0.5 * grainDuration;

    var attackEndTime = this.nextEventTime + attackDuration;
    var grainEndTime = this.nextEventTime + grainDuration;
    var releaseStartTime = grainEndTime - releaseDuration;

    // make attack and release
    envelopeNode.gain.setValueAtTime(0.0, this.nextEventTime);
    envelopeNode.gain.linearRampToValueAtTime(this.maxGrainAmplitude, attackEndTime);

    if (releaseStartTime > attackEndTime) {
      envelopeNode.gain.setValueAtTime(this.maxGrainAmplitude, releaseStartTime);
    }

    envelopeNode.gain.linearRampToValueAtTime(0.0, grainEndTime);
    return envelopeNode;
  }

  /**
   * Compute resampling rate for pitch shifting.
   * @private
   */
  GranularEngine.prototype.__computeResamplingRate = function() {
    var randomResampling = (Math.random() - 0.5) * 2.0 * this.resamplingVariation;
    var totalResampling = this.resampling + randomResampling;
    var resamplingRate = Math.pow(2.0, totalResampling / 1200.0);
    return resamplingRate;
  }

  //////////////////////////////////////
  // Required schedulable properties. //
  //////////////////////////////////////


  /**
   * Make event and compute next event time.
   * @private
   */
  GranularEngine.prototype.makeEventAndReturnNextTime = function() {
    this.__makeNextGrain();
    this.nextEventTime = this.nextEventTime + this.period;
    return this.nextEventTime;
  }

  /**
   * Time resetting.
   * @private
   */
  GranularEngine.prototype.resetAndReturnNextTime = function(time) {

    this.nextEventTime = time;
    return time; // start immediately
  }

  // Public methods
  // ----â€“---------

  // remove me (obsolete, validity can be checked in resetAndReturnNextTime returning Infinity)
  GranularEngine.prototype.isValid = function() {
    if (this.buffer) {
      return true;
    } else {
      console.error("No buffer is set");
      return false;
    }
  }

  /**
   * Connect public method.
   * @public
   * @chainable
   */
  GranularEngine.prototype.connect = function(target) {
    this.outputNode = target;
    this.gainNode.connect(this.outputNode);
    return this;
  }

  /**
   * Web audio API-like disconnect method.
   * @public
   * @chainable
   */
  GranularEngine.prototype.disconnect = function(output) {
    this.gainNode.disconnect(output);
    return this;
  }

  /**
   * Set buffer and bufferDuration.
   * @public
   * @chainable
   */
  GranularEngine.prototype.setBuffer = function(buffer) {

    this.buffer = buffer;
    this.bufferDuration = buffer.duration;
    return this;
  }

  /**
   * Set gain value and squared volume.
   * @public
   * @chainable
   */
  GranularEngine.prototype.setGain = function(gain) {

    this.gain = gain;
    // Let's use an x-squared curve since simple linear (x) does not sound as good.
    this.gainNode.gain.value = gain * gain;
    return this;
  }

  /**
   * Set buffer position.
   * @public
   * @chainable
   */
  GranularEngine.prototype.seek = function(position) {
    if (!arguments.length) throw new ReferenceError("seek(): no position");
    if (position < 0 || position > this.bufferDuration)
      throw new ReferenceError("seek(): no position");

    this.position = position;
    return this;
  }

;return GranularEngine;})();

module.exports = GranularEngine;
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Wb2x1bWVzL0hvbWUvRG9jdW1lbnRzL1dBVkUvZ3VscEJyb3dFcnN5Ni9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIiwiL1ZvbHVtZXMvSG9tZS9Eb2N1bWVudHMvd2F2ZS9yZXBvL2xpYi9naXRodWIvYXVkaW8vZ3JhbnVsYXItZW5naW5lL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvKiBHZW5lcmF0ZWQgYnkgZXM2LXRyYW5zcGlsZXIgdiAwLjcuMTQtMiAqL1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFdBVkUgYXVkaW8gbGlicmFyeSBlbGVtZW50OiBhIHdlYiBhdWRpbyBncmFudWxhciBlbmdpbmUuXG4gKiBAYXV0aG9yIEthcmltLkJhcmthdGlAaXJjYW0uZnIsIE5vcmJlcnQuU2NobmVsbEBpcmNhbS5mciwgVmljdG9yLlNhaXpAaXJjYW0uZnJcbiAqIEB2ZXJzaW9uIDIuMS4wXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBHcmFudWxhckVuZ2luZSA9IChmdW5jdGlvbigpe3ZhciBEUCQwID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3Rvci5cbiAgICogQHB1YmxpY1xuICAgKiBAY2hhaW5hYmxlXG4gICAqL1xuICBmdW5jdGlvbiBHcmFudWxhckVuZ2luZShhdWRpb0J1ZmZlciwgb3B0TmFtZSl7XG4gICAgXG4gICAgaWYgKCF0aGlzIHx8IHRoaXMgPT09IHdpbmRvdylcbiAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIllvdSBzZWVtIHRvIGhhdmUgZm9yZ290dGVuIHRoZSBuZXcgb3BlcmF0b3I7IFNoYW1lIG9uIHlvdSFcIik7XG5cbiAgICB0aGlzLnBlcmlvZCA9IDAuMDEgLy8gaW4gc2VjXG4gICAgdGhpcy5wb3NpdGlvbiA9IDAgLy8gYnVmZmVyIHBvc2l0aW9uIChpbiBzZWMpLCBhc3N1bWVkIG5vdCBub3JtYWxpemVkXG4gICAgdGhpcy5wb3NpdGlvblZhcmlhdGlvbiA9IDAuMDAzXG4gICAgdGhpcy5kdXJhdGlvbiA9IDAuMlxuICAgIHRoaXMucmVzYW1wbGluZyA9IDBcbiAgICB0aGlzLnJlc2FtcGxpbmdWYXJpYXRpb24gPSAwXG4gICAgdGhpcy5jZW50ZXJlZCA9IGZhbHNlXG4gICAgdGhpcy5tYXhHcmFpbkFtcGxpdHVkZSA9IDAuMlxuICAgIHRoaXMuc2V0QnVmZmVyKGF1ZGlvQnVmZmVyKTtcbiAgICB0aGlzLm5hbWUgPSBvcHROYW1lO1xuICAgIHRoaXMuZ2FpbiA9IDE7XG4gICAgXG4gICAgLy8gQ3JlYXRlIHdlYiBhdWRpbyBub2RlcywgcmVseWluZyBvbiB0aGUgd2ViIGF1ZGlvIGNvbnRleHQuXG4gICAgdGhpcy5nYWluTm9kZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVHYWluKCk7XG4gICAgdGhpcy5vdXRwdXROb2RlID0gYXVkaW9Db250ZXh0LmNyZWF0ZUdhaW4oKTsgLy8gZHVtbXkgbm9kZSB0byBwcm92aWRlIGEgd2ViIGF1ZGlvLWxpa2Ugb3V0cHV0IG5vZGVcblxuICB9RFAkMChHcmFudWxhckVuZ2luZSwgXCJwcm90b3R5cGVcIiwge1wiY29uZmlndXJhYmxlXCI6IGZhbHNlLCBcImVudW1lcmFibGVcIjogZmFsc2UsIFwid3JpdGFibGVcIjogZmFsc2V9KTtcblxuICAvLyBQcml2YXRlIG1ldGhvZHNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEdyYWluIGZhY3RvcnkuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBHcmFudWxhckVuZ2luZS5wcm90b3R5cGUuX19tYWtlTmV4dEdyYWluID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNvdXJjZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcbiAgICB2YXIgcmVzYW1wbGluZ1JhdGUgPSB0aGlzLl9fY29tcHV0ZVJlc2FtcGxpbmdSYXRlKCk7XG4gICAgdmFyIGdyYWluRHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uIC8gcmVzYW1wbGluZ1JhdGU7XG4gICAgdmFyIGdyYWluUG9zaXRpb24gPSB0aGlzLl9fY29tcHV0ZUdyYWluUG9zaXRpb24oZ3JhaW5EdXJhdGlvbik7XG4gICAgdmFyIGdyYWluRW52ZWxvcGVOb2RlID0gdGhpcy5fX21ha2VHcmFpbkVudmVsb3BlKGdyYWluRHVyYXRpb24pO1xuXG4gICAgc291cmNlLmJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgIHNvdXJjZS5wbGF5YmFja1JhdGUudmFsdWUgPSByZXNhbXBsaW5nUmF0ZTtcblxuICAgIHNvdXJjZS5jb25uZWN0KGdyYWluRW52ZWxvcGVOb2RlKTtcbiAgICBncmFpbkVudmVsb3BlTm9kZS5jb25uZWN0KHRoaXMuZ2Fpbk5vZGUpO1xuXG4gICAgLy8gYXJnczogc2NoZWR1bGUgdGltZSwgYnVmZmVyIG9mZnNldCwgZHVyYXRpb24gKGFsbCBpbiBzZWNvbmRzKVxuICAgIHNvdXJjZS5zdGFydCh0aGlzLm5leHRFdmVudFRpbWUsIGdyYWluUG9zaXRpb24sIHRoaXMuZHVyYXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXB1dGUgZ3JhaW4gcG9zaXRpb24gZnJvbSBkaXJlY3QgaW50ZXJhY3Rpb24gb3IgZXh0ZXJuYWwgdHJhbnNwb3J0ZXIgZGVsZWdhdGlvbi5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIEdyYW51bGFyRW5naW5lLnByb3RvdHlwZS5fX2NvbXB1dGVHcmFpblBvc2l0aW9uID0gZnVuY3Rpb24oZ3JhaW5EdXJhdGlvbikge1xuICAgIHZhciBncmFpblBvc2l0aW9uO1xuXG4gICAgLy8gVXBkYXRlIGdyYWluIHBvc2l0aW9uIHdoZW4gc2xhdmVkLCBmcm9tIGxhc3Qgc3luY2hyb25pemF0aW9uXG4gICAgaWYgKHRoaXMuaXNUcmFuc3BvcnRhYmxlKSB7XG4gICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLnRyYW5zcG9ydGVyLnRpbWViYXNlLmdldFBvc2l0aW9uQXRUaW1lKHRoaXMubmV4dEV2ZW50VGltZSk7XG5cbiAgICAgIGlmIChwb3NpdGlvbiA+PSAwICYmIHBvc2l0aW9uIDw9IHRoaXMuYnVmZmVyRHVyYXRpb24pIHtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJHcmFpbiBwb3NpdGlvbiBpcyBvdXQgb2YgYm91bmRzXCIpO1xuICAgICAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShcIm5vdGlmeUVuZFwiKSkge1xuICAgICAgICAgIHRoaXMubm90aWZ5RW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBncmFpblBvc2l0aW9uID0gdGhpcy5fX3JhbmRvbWl6ZUdyYWluUG9zaXRpb24odGhpcy5wb3NpdGlvbiAlIHRoaXMuYnVmZmVyRHVyYXRpb24pO1xuICAgIGlmICh0aGlzLmNlbnRlcmVkKSBncmFpblBvc2l0aW9uIC09IDAuNSAqIGdyYWluRHVyYXRpb247XG5cbiAgICByZXR1cm4gZ3JhaW5Qb3NpdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSYW5kb21pemUgcG9zaXRpb24gdG8gYnJlYWsgcGhhc2luZyBhcnRpZmFjdHMsIGV4Y2VwdCB3aGVuIHBsYXlpbmcgYXQgbm9ybWFsIHNwZWVkLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgR3JhbnVsYXJFbmdpbmUucHJvdG90eXBlLl9fcmFuZG9taXplR3JhaW5Qb3NpdGlvbiA9IGZ1bmN0aW9uKGdyYWluUG9zaXRpb24pIHtcbiAgICB2YXIgcmFuZG9tR3JhaW5TaGlmdCA9IChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDIuMCAqIHRoaXMucG9zaXRpb25WYXJpYXRpb247XG5cbiAgICByZXR1cm4gKGdyYWluUG9zaXRpb24gKyByYW5kb21HcmFpblNoaWZ0KSAlIHRoaXMuYnVmZmVyRHVyYXRpb247XG4gIH1cblxuXG4gIC8qKlxuICAgKiBTaW1wbGUgdHJpYW5nbGUgZW52ZWxvcGUgZ2VuZXJhdG9yIGZvciBncmFpbnMuXG4gICAqIEB0b2RvIGhhbm5pbmcgZW52ZWxvcGUgKG9yIGdhdXNzaWFuKVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgR3JhbnVsYXJFbmdpbmUucHJvdG90eXBlLl9fbWFrZUdyYWluRW52ZWxvcGUgPSBmdW5jdGlvbihncmFpbkR1cmF0aW9uKSB7XG4gICAgdmFyIGVudmVsb3BlTm9kZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVHYWluKCk7XG4gICAgdmFyIGF0dGFja0R1cmF0aW9uID0gMC41ICogZ3JhaW5EdXJhdGlvbjtcbiAgICB2YXIgcmVsZWFzZUR1cmF0aW9uID0gMC41ICogZ3JhaW5EdXJhdGlvbjtcblxuICAgIHZhciBhdHRhY2tFbmRUaW1lID0gdGhpcy5uZXh0RXZlbnRUaW1lICsgYXR0YWNrRHVyYXRpb247XG4gICAgdmFyIGdyYWluRW5kVGltZSA9IHRoaXMubmV4dEV2ZW50VGltZSArIGdyYWluRHVyYXRpb247XG4gICAgdmFyIHJlbGVhc2VTdGFydFRpbWUgPSBncmFpbkVuZFRpbWUgLSByZWxlYXNlRHVyYXRpb247XG5cbiAgICAvLyBtYWtlIGF0dGFjayBhbmQgcmVsZWFzZVxuICAgIGVudmVsb3BlTm9kZS5nYWluLnNldFZhbHVlQXRUaW1lKDAuMCwgdGhpcy5uZXh0RXZlbnRUaW1lKTtcbiAgICBlbnZlbG9wZU5vZGUuZ2Fpbi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSh0aGlzLm1heEdyYWluQW1wbGl0dWRlLCBhdHRhY2tFbmRUaW1lKTtcblxuICAgIGlmIChyZWxlYXNlU3RhcnRUaW1lID4gYXR0YWNrRW5kVGltZSkge1xuICAgICAgZW52ZWxvcGVOb2RlLmdhaW4uc2V0VmFsdWVBdFRpbWUodGhpcy5tYXhHcmFpbkFtcGxpdHVkZSwgcmVsZWFzZVN0YXJ0VGltZSk7XG4gICAgfVxuXG4gICAgZW52ZWxvcGVOb2RlLmdhaW4ubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoMC4wLCBncmFpbkVuZFRpbWUpO1xuICAgIHJldHVybiBlbnZlbG9wZU5vZGU7XG4gIH1cblxuICAvKipcbiAgICogQ29tcHV0ZSByZXNhbXBsaW5nIHJhdGUgZm9yIHBpdGNoIHNoaWZ0aW5nLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgR3JhbnVsYXJFbmdpbmUucHJvdG90eXBlLl9fY29tcHV0ZVJlc2FtcGxpbmdSYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJhbmRvbVJlc2FtcGxpbmcgPSAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiAyLjAgKiB0aGlzLnJlc2FtcGxpbmdWYXJpYXRpb247XG4gICAgdmFyIHRvdGFsUmVzYW1wbGluZyA9IHRoaXMucmVzYW1wbGluZyArIHJhbmRvbVJlc2FtcGxpbmc7XG4gICAgdmFyIHJlc2FtcGxpbmdSYXRlID0gTWF0aC5wb3coMi4wLCB0b3RhbFJlc2FtcGxpbmcgLyAxMjAwLjApO1xuICAgIHJldHVybiByZXNhbXBsaW5nUmF0ZTtcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFJlcXVpcmVkIHNjaGVkdWxhYmxlIHByb3BlcnRpZXMuIC8vXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxuICAvKipcbiAgICogTWFrZSBldmVudCBhbmQgY29tcHV0ZSBuZXh0IGV2ZW50IHRpbWUuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBHcmFudWxhckVuZ2luZS5wcm90b3R5cGUubWFrZUV2ZW50QW5kUmV0dXJuTmV4dFRpbWUgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9fbWFrZU5leHRHcmFpbigpO1xuICAgIHRoaXMubmV4dEV2ZW50VGltZSA9IHRoaXMubmV4dEV2ZW50VGltZSArIHRoaXMucGVyaW9kO1xuICAgIHJldHVybiB0aGlzLm5leHRFdmVudFRpbWU7XG4gIH1cblxuICAvKipcbiAgICogVGltZSByZXNldHRpbmcuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBHcmFudWxhckVuZ2luZS5wcm90b3R5cGUucmVzZXRBbmRSZXR1cm5OZXh0VGltZSA9IGZ1bmN0aW9uKHRpbWUpIHtcblxuICAgIHRoaXMubmV4dEV2ZW50VGltZSA9IHRpbWU7XG4gICAgcmV0dXJuIHRpbWU7IC8vIHN0YXJ0IGltbWVkaWF0ZWx5XG4gIH1cblxuICAvLyBQdWJsaWMgbWV0aG9kc1xuICAvLyAtLS0t4oCTLS0tLS0tLS0tXG5cbiAgLy8gcmVtb3ZlIG1lIChvYnNvbGV0ZSwgdmFsaWRpdHkgY2FuIGJlIGNoZWNrZWQgaW4gcmVzZXRBbmRSZXR1cm5OZXh0VGltZSByZXR1cm5pbmcgSW5maW5pdHkpXG4gIEdyYW51bGFyRW5naW5lLnByb3RvdHlwZS5pc1ZhbGlkID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuYnVmZmVyKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5lcnJvcihcIk5vIGJ1ZmZlciBpcyBzZXRcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbm5lY3QgcHVibGljIG1ldGhvZC5cbiAgICogQHB1YmxpY1xuICAgKiBAY2hhaW5hYmxlXG4gICAqL1xuICBHcmFudWxhckVuZ2luZS5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uKHRhcmdldCkge1xuICAgIHRoaXMub3V0cHV0Tm9kZSA9IHRhcmdldDtcbiAgICB0aGlzLmdhaW5Ob2RlLmNvbm5lY3QodGhpcy5vdXRwdXROb2RlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBXZWIgYXVkaW8gQVBJLWxpa2UgZGlzY29ubmVjdCBtZXRob2QuXG4gICAqIEBwdWJsaWNcbiAgICogQGNoYWluYWJsZVxuICAgKi9cbiAgR3JhbnVsYXJFbmdpbmUucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbihvdXRwdXQpIHtcbiAgICB0aGlzLmdhaW5Ob2RlLmRpc2Nvbm5lY3Qob3V0cHV0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYnVmZmVyIGFuZCBidWZmZXJEdXJhdGlvbi5cbiAgICogQHB1YmxpY1xuICAgKiBAY2hhaW5hYmxlXG4gICAqL1xuICBHcmFudWxhckVuZ2luZS5wcm90b3R5cGUuc2V0QnVmZmVyID0gZnVuY3Rpb24oYnVmZmVyKSB7XG5cbiAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICB0aGlzLmJ1ZmZlckR1cmF0aW9uID0gYnVmZmVyLmR1cmF0aW9uO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBnYWluIHZhbHVlIGFuZCBzcXVhcmVkIHZvbHVtZS5cbiAgICogQHB1YmxpY1xuICAgKiBAY2hhaW5hYmxlXG4gICAqL1xuICBHcmFudWxhckVuZ2luZS5wcm90b3R5cGUuc2V0R2FpbiA9IGZ1bmN0aW9uKGdhaW4pIHtcblxuICAgIHRoaXMuZ2FpbiA9IGdhaW47XG4gICAgLy8gTGV0J3MgdXNlIGFuIHgtc3F1YXJlZCBjdXJ2ZSBzaW5jZSBzaW1wbGUgbGluZWFyICh4KSBkb2VzIG5vdCBzb3VuZCBhcyBnb29kLlxuICAgIHRoaXMuZ2Fpbk5vZGUuZ2Fpbi52YWx1ZSA9IGdhaW4gKiBnYWluO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBidWZmZXIgcG9zaXRpb24uXG4gICAqIEBwdWJsaWNcbiAgICogQGNoYWluYWJsZVxuICAgKi9cbiAgR3JhbnVsYXJFbmdpbmUucHJvdG90eXBlLnNlZWsgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwic2VlaygpOiBubyBwb3NpdGlvblwiKTtcbiAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID4gdGhpcy5idWZmZXJEdXJhdGlvbilcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInNlZWsoKTogbm8gcG9zaXRpb25cIik7XG5cbiAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuO3JldHVybiBHcmFudWxhckVuZ2luZTt9KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdyYW51bGFyRW5naW5lOyJdfQ==
