(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* Generated by es6-transpiler v 0.7.14-2 */var DP$0 = Object.defineProperty;/**
 * @fileoverview WAVE audio library element: a web audio granular engine.
 * @author Karim.Barkati@ircam.fr, Norbert.Schnell@ircam.fr, Victor.Saiz@ircam.fr
 * @version 2.1.1
 */

"use strict";

var Scheduled = require("../scheduled");
var Transported = require("../transported");

var ScheduledGranular = (function(super$0){var MIXIN$0 = function(t,s){for(var p in s){if(s.hasOwnProperty(p)){DP$0(t,p,Object.getOwnPropertyDescriptor(s,p));}}return t};function ScheduledGranular() {super$0.apply(this, arguments)}MIXIN$0(ScheduledGranular, super$0);ScheduledGranular.prototype = Object.create(super$0.prototype, {"constructor": {"value": ScheduledGranular, "configurable": true, "writable": true} });DP$0(ScheduledGranular, "prototype", {"configurable": false, "enumerable": false, "writable": false});
  ScheduledGranular.prototype.reset = function(time) {
    if (parent.buffer === null)
      return Infinity; // do not schedule

    return time;
  }

  ScheduledGranular.prototype.execute = function(time) {
    return parent.trigger(time) + period;
  }
;return ScheduledGranular;})(Scheduled);

var GranularEngine = (function(){

  function GranularEngine() {var buffer = arguments[0];if(buffer === void 0)buffer = null;var name = arguments[1];if(name === void 0)name = "unnamed";
    this.name = name;

    this.buffer = buffer; // audio buffer
    this.periodAbs = 0.01; // absolute period
    this.periodRel = 0.0; // period relative to duration
    this.periodVar = 0.0; // period variation relative to grain period
    this.position = 0.0; // grain position (onset time) in sec
    this.positionVar = 0.003; // grain position variation in sec
    this.durationAbs = 0.1; // absolute grain duration
    this.durationRel = 0.0; // duration relative to absolute period
    this.attackAbs = 0.0; // absolute attack time
    this.attackRel = 0.5; // attack time relative to duration
    this.releaseAbs = 0.0; // absolute release time
    this.releaseRel = 0.5; // release time relative to duration
    this.resampling = 0; // resampling in cent
    this.resamplingVar = 0; // resampling variation in cent
    this.centered = true; // whether grain position refers to teh center of teh grain (or the beginning)

    // private properties
    this.callback = null;
    this.gainNode = audioContext.createGain();

    // interfaces
    this.scheduled = new ScheduledGranular(this);
    this.transported = new Transported(this); // transported but not scheduled
  }Object.defineProperties(GranularEngine.prototype, {gain: {"get": gain$get$0, "set": gain$set$0, "configurable": true, "enumerable": true}});DP$0(GranularEngine, "prototype", {"configurable": false, "enumerable": false, "writable": false});

  function gain$set$0(value) {
    this.gainNode.gain.value = val;
  }

  function gain$get$0() {
    return this.gainNode.gain.value;
  }

  /**
   * Audio node connect method.
   * @public
   * @chainable
   */
  GranularEngine.prototype.connect = function(target) {
    this.gainNode.connect(target || audioContext.destination);
    return this;
  }

  /**
   * Audio node disconnect method.
   * @public
   * @chainable
   */
  GranularEngine.prototype.disconnect = function(index) {
    this.gainNode.disconnect(index);
    return this;
  }

  GranularEngine.prototype.trigger = function() {var grainTime = arguments[0];if(grainTime === void 0)grainTime = audioContext.currentTime; // TODO: check if smart
    var grainPeriod = this.periodAbs;
    var grainPosition = this.position;
    var grainDuration = this.durationAbs;
    var resamplingRate = 1.0;

    // calculate resampling
    if (this.resampling !== 0 || this.resamplingVar > 0) {
      var randomResampling = (Math.random() - 0.5) * 2.0 * this.resamplingVar;
      resamplingRate = Math.pow(2.0, (this.resampling + randomResampling) / 1200.0);
    }

    grainPeriod += this.periodRel * grainDuration;
    grainDuration += this.durationRel * grainPeriod;

    // grain period randon variation
    if (this.periodVar > 0.0)
      grainPeriod += 2.0 * (Math.random() - 0.5) * this.periodVar * grainPeriod;

    // add transport position
    grainPosition += this.transported.position;

    if (this.callback) {
      var params = {
        position: grainPosition,
        period: grainPeriod,
        duration: grainDuration
      };

      this.callback(params);

      grainPosition = params.position;
      grainPeriod = params.period;
      grainDuration = params.duration;
    }

    // center grain
    if (this.centered)
      grainPosition -= 0.5 * grainDuration;

    // randomize grain position
    if (this.positionVar > 0)
      grainPosition += (2.0 * Math.random() - 1) * this.positionVar;

    // shorten duration of grains over the edges of the buffer
    if (grainPosition < 0) {
      grainDuration += grainPosition;
      grainPosition = 0;
    }

    if (grainPosition + grainDuration > this.buffer.duration)
      grainDuration = this.buffer.duration - grainPosition;

    // make grain
    if (this.gain > 0 && grainDuration > 0) {
      // make grain envelope
      var envelopeNode = audioContext.createGain();
      var attack = this.attackAbs + this.attackRel * grainDuration;
      var release = this.releaseAbs + this.releaseRel * grainDuration;

      if (attack + release > grainDuration) {
        var factor = grainDuration / (attack + release);
        attack *= factor;
        release *= factor;
      }

      if (grainTime < audioContext.currentTime)
        grainTime = audioContext.currentTime;

      var attackEndTime = grainTime + attack;
      var grainEndTime = grainTime + grainDuration;
      var releaseStartTime = grainEndTime - release;

      envelopeNode.gain.setValueAtTime(0.0, grainTime);
      envelopeNode.gain.linearRampToValueAtTime(1.0, attackEndTime);

      if (releaseStartTime > attackEndTime)
        envelopeNode.gain.setValueAtTime(1.0, releaseStartTime);

      envelopeNode.gain.linearRampToValueAtTime(0.0, grainEndTime);
      envelopeNode.connect(this.gainNode);

      // make source
      var source = audioContext.createBufferSource();

      source.buffer = this.buffer;
      source.playbackRate.value = resamplingRate;
      source.connect(envelopeNode);
      envelopeNode.connect(this.gainNode);

      source.start(grainTime, grainPosition);
      source.stop(grainTime + grainDuration / resamplingRate);
    }

    return grainPeriod;
  }
;return GranularEngine;})();
module.exports = GranularEngine;
},{"../scheduled":2,"../transported":3}],2:[function(require,module,exports){
/* Generated by es6-transpiler v 0.7.14-2 */
"use strict";

var Scheduled = (function(){var DP$0 = Object.defineProperty;

  function Scheduled(parent) {
    this.parent = parent;
    // written by scheduler only others read
    this.scheduler = null;
  }Object.defineProperties(Scheduled.prototype, {time: {"get": time$get$0, "configurable": true, "enumerable": true}});DP$0(Scheduled, "prototype", {"configurable": false, "enumerable": false, "writable": false});

  // to be implemented by instance
  Scheduled.prototype.reset = function(time) {
    return Infinity;
  }

  // to be implemented by instance
  Scheduled.prototype.execute = function(time) {
    return Infinity;
  }

  Scheduled.prototype.reschedule = function(time) {
    this.scheduler.reschedule(this, time);
  }

  function time$get$0() {
    return this.scheduler.time;
  }
;return Scheduled;})();

module.exports = Scheduled;
},{}],3:[function(require,module,exports){
/* Generated by es6-transpiler v 0.7.14-2 */
"use strict";

var Transported = (function(){var DP$0 = Object.defineProperty;
 
 function Transported(parent) {
   this.parent = parent;
   // written by transporter
   this.transporter = null;
 }Object.defineProperties(Transported.prototype, {position: {"get": position$get$0, "configurable": true, "enumerable": true}});DP$0(Transported, "prototype", {"configurable": false, "enumerable": false, "writable": false});

 // to be implemented by instance
 Transported.prototype.reset = function(position) {
   return Infinity;
 }

 // to be implemented by instance
 Transported.prototype.execute = function(position) {
   return Infinity;
 }

 Transported.prototype.reschedule = function(position) {
   this.transporter.reschedule(this, position);
 }

 function position$get$0() {
   if(this.transporter)
     return this.transporter.position;

   return 0.0;
 }

;return Transported;})();

module.exports = Transported;
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Wb2x1bWVzL0hvbWUvRG9jdW1lbnRzL1dBVkUvZ3VscEJyb3dFcnN5Ni9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIiwiL1ZvbHVtZXMvSG9tZS9Eb2N1bWVudHMvd2F2ZS9yZXBvL2xpYi9naXRodWIvYXVkaW8vZ3JhbnVsYXItZW5naW5lL2luZGV4LmpzIiwiL1ZvbHVtZXMvSG9tZS9Eb2N1bWVudHMvd2F2ZS9yZXBvL2xpYi9naXRodWIvYXVkaW8vc2NoZWR1bGVkL2luZGV4LmpzIiwiL1ZvbHVtZXMvSG9tZS9Eb2N1bWVudHMvd2F2ZS9yZXBvL2xpYi9naXRodWIvYXVkaW8vdHJhbnNwb3J0ZWQvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8qIEdlbmVyYXRlZCBieSBlczYtdHJhbnNwaWxlciB2IDAuNy4xNC0yICovdmFyIERQJDAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7LyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFdBVkUgYXVkaW8gbGlicmFyeSBlbGVtZW50OiBhIHdlYiBhdWRpbyBncmFudWxhciBlbmdpbmUuXG4gKiBAYXV0aG9yIEthcmltLkJhcmthdGlAaXJjYW0uZnIsIE5vcmJlcnQuU2NobmVsbEBpcmNhbS5mciwgVmljdG9yLlNhaXpAaXJjYW0uZnJcbiAqIEB2ZXJzaW9uIDIuMS4xXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBTY2hlZHVsZWQgPSByZXF1aXJlKFwiLi4vc2NoZWR1bGVkXCIpO1xudmFyIFRyYW5zcG9ydGVkID0gcmVxdWlyZShcIi4uL3RyYW5zcG9ydGVkXCIpO1xuXG52YXIgU2NoZWR1bGVkR3JhbnVsYXIgPSAoZnVuY3Rpb24oc3VwZXIkMCl7dmFyIE1JWElOJDAgPSBmdW5jdGlvbih0LHMpe2Zvcih2YXIgcCBpbiBzKXtpZihzLmhhc093blByb3BlcnR5KHApKXtEUCQwKHQscCxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHMscCkpO319cmV0dXJuIHR9O2Z1bmN0aW9uIFNjaGVkdWxlZEdyYW51bGFyKCkge3N1cGVyJDAuYXBwbHkodGhpcywgYXJndW1lbnRzKX1NSVhJTiQwKFNjaGVkdWxlZEdyYW51bGFyLCBzdXBlciQwKTtTY2hlZHVsZWRHcmFudWxhci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyJDAucHJvdG90eXBlLCB7XCJjb25zdHJ1Y3RvclwiOiB7XCJ2YWx1ZVwiOiBTY2hlZHVsZWRHcmFudWxhciwgXCJjb25maWd1cmFibGVcIjogdHJ1ZSwgXCJ3cml0YWJsZVwiOiB0cnVlfSB9KTtEUCQwKFNjaGVkdWxlZEdyYW51bGFyLCBcInByb3RvdHlwZVwiLCB7XCJjb25maWd1cmFibGVcIjogZmFsc2UsIFwiZW51bWVyYWJsZVwiOiBmYWxzZSwgXCJ3cml0YWJsZVwiOiBmYWxzZX0pO1xuICBTY2hlZHVsZWRHcmFudWxhci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbih0aW1lKSB7XG4gICAgaWYgKHBhcmVudC5idWZmZXIgPT09IG51bGwpXG4gICAgICByZXR1cm4gSW5maW5pdHk7IC8vIGRvIG5vdCBzY2hlZHVsZVxuXG4gICAgcmV0dXJuIHRpbWU7XG4gIH1cblxuICBTY2hlZHVsZWRHcmFudWxhci5wcm90b3R5cGUuZXhlY3V0ZSA9IGZ1bmN0aW9uKHRpbWUpIHtcbiAgICByZXR1cm4gcGFyZW50LnRyaWdnZXIodGltZSkgKyBwZXJpb2Q7XG4gIH1cbjtyZXR1cm4gU2NoZWR1bGVkR3JhbnVsYXI7fSkoU2NoZWR1bGVkKTtcblxudmFyIEdyYW51bGFyRW5naW5lID0gKGZ1bmN0aW9uKCl7XG5cbiAgZnVuY3Rpb24gR3JhbnVsYXJFbmdpbmUoKSB7dmFyIGJ1ZmZlciA9IGFyZ3VtZW50c1swXTtpZihidWZmZXIgPT09IHZvaWQgMClidWZmZXIgPSBudWxsO3ZhciBuYW1lID0gYXJndW1lbnRzWzFdO2lmKG5hbWUgPT09IHZvaWQgMCluYW1lID0gXCJ1bm5hbWVkXCI7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcblxuICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyOyAvLyBhdWRpbyBidWZmZXJcbiAgICB0aGlzLnBlcmlvZEFicyA9IDAuMDE7IC8vIGFic29sdXRlIHBlcmlvZFxuICAgIHRoaXMucGVyaW9kUmVsID0gMC4wOyAvLyBwZXJpb2QgcmVsYXRpdmUgdG8gZHVyYXRpb25cbiAgICB0aGlzLnBlcmlvZFZhciA9IDAuMDsgLy8gcGVyaW9kIHZhcmlhdGlvbiByZWxhdGl2ZSB0byBncmFpbiBwZXJpb2RcbiAgICB0aGlzLnBvc2l0aW9uID0gMC4wOyAvLyBncmFpbiBwb3NpdGlvbiAob25zZXQgdGltZSkgaW4gc2VjXG4gICAgdGhpcy5wb3NpdGlvblZhciA9IDAuMDAzOyAvLyBncmFpbiBwb3NpdGlvbiB2YXJpYXRpb24gaW4gc2VjXG4gICAgdGhpcy5kdXJhdGlvbkFicyA9IDAuMTsgLy8gYWJzb2x1dGUgZ3JhaW4gZHVyYXRpb25cbiAgICB0aGlzLmR1cmF0aW9uUmVsID0gMC4wOyAvLyBkdXJhdGlvbiByZWxhdGl2ZSB0byBhYnNvbHV0ZSBwZXJpb2RcbiAgICB0aGlzLmF0dGFja0FicyA9IDAuMDsgLy8gYWJzb2x1dGUgYXR0YWNrIHRpbWVcbiAgICB0aGlzLmF0dGFja1JlbCA9IDAuNTsgLy8gYXR0YWNrIHRpbWUgcmVsYXRpdmUgdG8gZHVyYXRpb25cbiAgICB0aGlzLnJlbGVhc2VBYnMgPSAwLjA7IC8vIGFic29sdXRlIHJlbGVhc2UgdGltZVxuICAgIHRoaXMucmVsZWFzZVJlbCA9IDAuNTsgLy8gcmVsZWFzZSB0aW1lIHJlbGF0aXZlIHRvIGR1cmF0aW9uXG4gICAgdGhpcy5yZXNhbXBsaW5nID0gMDsgLy8gcmVzYW1wbGluZyBpbiBjZW50XG4gICAgdGhpcy5yZXNhbXBsaW5nVmFyID0gMDsgLy8gcmVzYW1wbGluZyB2YXJpYXRpb24gaW4gY2VudFxuICAgIHRoaXMuY2VudGVyZWQgPSB0cnVlOyAvLyB3aGV0aGVyIGdyYWluIHBvc2l0aW9uIHJlZmVycyB0byB0ZWggY2VudGVyIG9mIHRlaCBncmFpbiAob3IgdGhlIGJlZ2lubmluZylcblxuICAgIC8vIHByaXZhdGUgcHJvcGVydGllc1xuICAgIHRoaXMuY2FsbGJhY2sgPSBudWxsO1xuICAgIHRoaXMuZ2Fpbk5vZGUgPSBhdWRpb0NvbnRleHQuY3JlYXRlR2FpbigpO1xuXG4gICAgLy8gaW50ZXJmYWNlc1xuICAgIHRoaXMuc2NoZWR1bGVkID0gbmV3IFNjaGVkdWxlZEdyYW51bGFyKHRoaXMpO1xuICAgIHRoaXMudHJhbnNwb3J0ZWQgPSBuZXcgVHJhbnNwb3J0ZWQodGhpcyk7IC8vIHRyYW5zcG9ydGVkIGJ1dCBub3Qgc2NoZWR1bGVkXG4gIH1PYmplY3QuZGVmaW5lUHJvcGVydGllcyhHcmFudWxhckVuZ2luZS5wcm90b3R5cGUsIHtnYWluOiB7XCJnZXRcIjogZ2FpbiRnZXQkMCwgXCJzZXRcIjogZ2FpbiRzZXQkMCwgXCJjb25maWd1cmFibGVcIjogdHJ1ZSwgXCJlbnVtZXJhYmxlXCI6IHRydWV9fSk7RFAkMChHcmFudWxhckVuZ2luZSwgXCJwcm90b3R5cGVcIiwge1wiY29uZmlndXJhYmxlXCI6IGZhbHNlLCBcImVudW1lcmFibGVcIjogZmFsc2UsIFwid3JpdGFibGVcIjogZmFsc2V9KTtcblxuICBmdW5jdGlvbiBnYWluJHNldCQwKHZhbHVlKSB7XG4gICAgdGhpcy5nYWluTm9kZS5nYWluLnZhbHVlID0gdmFsO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2FpbiRnZXQkMCgpIHtcbiAgICByZXR1cm4gdGhpcy5nYWluTm9kZS5nYWluLnZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEF1ZGlvIG5vZGUgY29ubmVjdCBtZXRob2QuXG4gICAqIEBwdWJsaWNcbiAgICogQGNoYWluYWJsZVxuICAgKi9cbiAgR3JhbnVsYXJFbmdpbmUucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICB0aGlzLmdhaW5Ob2RlLmNvbm5lY3QodGFyZ2V0IHx8IGF1ZGlvQ29udGV4dC5kZXN0aW5hdGlvbik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQXVkaW8gbm9kZSBkaXNjb25uZWN0IG1ldGhvZC5cbiAgICogQHB1YmxpY1xuICAgKiBAY2hhaW5hYmxlXG4gICAqL1xuICBHcmFudWxhckVuZ2luZS5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgdGhpcy5nYWluTm9kZS5kaXNjb25uZWN0KGluZGV4KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIEdyYW51bGFyRW5naW5lLnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24oKSB7dmFyIGdyYWluVGltZSA9IGFyZ3VtZW50c1swXTtpZihncmFpblRpbWUgPT09IHZvaWQgMClncmFpblRpbWUgPSBhdWRpb0NvbnRleHQuY3VycmVudFRpbWU7IC8vIFRPRE86IGNoZWNrIGlmIHNtYXJ0XG4gICAgdmFyIGdyYWluUGVyaW9kID0gdGhpcy5wZXJpb2RBYnM7XG4gICAgdmFyIGdyYWluUG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uO1xuICAgIHZhciBncmFpbkR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbkFicztcbiAgICB2YXIgcmVzYW1wbGluZ1JhdGUgPSAxLjA7XG5cbiAgICAvLyBjYWxjdWxhdGUgcmVzYW1wbGluZ1xuICAgIGlmICh0aGlzLnJlc2FtcGxpbmcgIT09IDAgfHwgdGhpcy5yZXNhbXBsaW5nVmFyID4gMCkge1xuICAgICAgdmFyIHJhbmRvbVJlc2FtcGxpbmcgPSAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiAyLjAgKiB0aGlzLnJlc2FtcGxpbmdWYXI7XG4gICAgICByZXNhbXBsaW5nUmF0ZSA9IE1hdGgucG93KDIuMCwgKHRoaXMucmVzYW1wbGluZyArIHJhbmRvbVJlc2FtcGxpbmcpIC8gMTIwMC4wKTtcbiAgICB9XG5cbiAgICBncmFpblBlcmlvZCArPSB0aGlzLnBlcmlvZFJlbCAqIGdyYWluRHVyYXRpb247XG4gICAgZ3JhaW5EdXJhdGlvbiArPSB0aGlzLmR1cmF0aW9uUmVsICogZ3JhaW5QZXJpb2Q7XG5cbiAgICAvLyBncmFpbiBwZXJpb2QgcmFuZG9uIHZhcmlhdGlvblxuICAgIGlmICh0aGlzLnBlcmlvZFZhciA+IDAuMClcbiAgICAgIGdyYWluUGVyaW9kICs9IDIuMCAqIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIHRoaXMucGVyaW9kVmFyICogZ3JhaW5QZXJpb2Q7XG5cbiAgICAvLyBhZGQgdHJhbnNwb3J0IHBvc2l0aW9uXG4gICAgZ3JhaW5Qb3NpdGlvbiArPSB0aGlzLnRyYW5zcG9ydGVkLnBvc2l0aW9uO1xuXG4gICAgaWYgKHRoaXMuY2FsbGJhY2spIHtcbiAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgIHBvc2l0aW9uOiBncmFpblBvc2l0aW9uLFxuICAgICAgICBwZXJpb2Q6IGdyYWluUGVyaW9kLFxuICAgICAgICBkdXJhdGlvbjogZ3JhaW5EdXJhdGlvblxuICAgICAgfTtcblxuICAgICAgdGhpcy5jYWxsYmFjayhwYXJhbXMpO1xuXG4gICAgICBncmFpblBvc2l0aW9uID0gcGFyYW1zLnBvc2l0aW9uO1xuICAgICAgZ3JhaW5QZXJpb2QgPSBwYXJhbXMucGVyaW9kO1xuICAgICAgZ3JhaW5EdXJhdGlvbiA9IHBhcmFtcy5kdXJhdGlvbjtcbiAgICB9XG5cbiAgICAvLyBjZW50ZXIgZ3JhaW5cbiAgICBpZiAodGhpcy5jZW50ZXJlZClcbiAgICAgIGdyYWluUG9zaXRpb24gLT0gMC41ICogZ3JhaW5EdXJhdGlvbjtcblxuICAgIC8vIHJhbmRvbWl6ZSBncmFpbiBwb3NpdGlvblxuICAgIGlmICh0aGlzLnBvc2l0aW9uVmFyID4gMClcbiAgICAgIGdyYWluUG9zaXRpb24gKz0gKDIuMCAqIE1hdGgucmFuZG9tKCkgLSAxKSAqIHRoaXMucG9zaXRpb25WYXI7XG5cbiAgICAvLyBzaG9ydGVuIGR1cmF0aW9uIG9mIGdyYWlucyBvdmVyIHRoZSBlZGdlcyBvZiB0aGUgYnVmZmVyXG4gICAgaWYgKGdyYWluUG9zaXRpb24gPCAwKSB7XG4gICAgICBncmFpbkR1cmF0aW9uICs9IGdyYWluUG9zaXRpb247XG4gICAgICBncmFpblBvc2l0aW9uID0gMDtcbiAgICB9XG5cbiAgICBpZiAoZ3JhaW5Qb3NpdGlvbiArIGdyYWluRHVyYXRpb24gPiB0aGlzLmJ1ZmZlci5kdXJhdGlvbilcbiAgICAgIGdyYWluRHVyYXRpb24gPSB0aGlzLmJ1ZmZlci5kdXJhdGlvbiAtIGdyYWluUG9zaXRpb247XG5cbiAgICAvLyBtYWtlIGdyYWluXG4gICAgaWYgKHRoaXMuZ2FpbiA+IDAgJiYgZ3JhaW5EdXJhdGlvbiA+IDApIHtcbiAgICAgIC8vIG1ha2UgZ3JhaW4gZW52ZWxvcGVcbiAgICAgIHZhciBlbnZlbG9wZU5vZGUgPSBhdWRpb0NvbnRleHQuY3JlYXRlR2FpbigpO1xuICAgICAgdmFyIGF0dGFjayA9IHRoaXMuYXR0YWNrQWJzICsgdGhpcy5hdHRhY2tSZWwgKiBncmFpbkR1cmF0aW9uO1xuICAgICAgdmFyIHJlbGVhc2UgPSB0aGlzLnJlbGVhc2VBYnMgKyB0aGlzLnJlbGVhc2VSZWwgKiBncmFpbkR1cmF0aW9uO1xuXG4gICAgICBpZiAoYXR0YWNrICsgcmVsZWFzZSA+IGdyYWluRHVyYXRpb24pIHtcbiAgICAgICAgdmFyIGZhY3RvciA9IGdyYWluRHVyYXRpb24gLyAoYXR0YWNrICsgcmVsZWFzZSk7XG4gICAgICAgIGF0dGFjayAqPSBmYWN0b3I7XG4gICAgICAgIHJlbGVhc2UgKj0gZmFjdG9yO1xuICAgICAgfVxuXG4gICAgICBpZiAoZ3JhaW5UaW1lIDwgYXVkaW9Db250ZXh0LmN1cnJlbnRUaW1lKVxuICAgICAgICBncmFpblRpbWUgPSBhdWRpb0NvbnRleHQuY3VycmVudFRpbWU7XG5cbiAgICAgIHZhciBhdHRhY2tFbmRUaW1lID0gZ3JhaW5UaW1lICsgYXR0YWNrO1xuICAgICAgdmFyIGdyYWluRW5kVGltZSA9IGdyYWluVGltZSArIGdyYWluRHVyYXRpb247XG4gICAgICB2YXIgcmVsZWFzZVN0YXJ0VGltZSA9IGdyYWluRW5kVGltZSAtIHJlbGVhc2U7XG5cbiAgICAgIGVudmVsb3BlTm9kZS5nYWluLnNldFZhbHVlQXRUaW1lKDAuMCwgZ3JhaW5UaW1lKTtcbiAgICAgIGVudmVsb3BlTm9kZS5nYWluLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKDEuMCwgYXR0YWNrRW5kVGltZSk7XG5cbiAgICAgIGlmIChyZWxlYXNlU3RhcnRUaW1lID4gYXR0YWNrRW5kVGltZSlcbiAgICAgICAgZW52ZWxvcGVOb2RlLmdhaW4uc2V0VmFsdWVBdFRpbWUoMS4wLCByZWxlYXNlU3RhcnRUaW1lKTtcblxuICAgICAgZW52ZWxvcGVOb2RlLmdhaW4ubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoMC4wLCBncmFpbkVuZFRpbWUpO1xuICAgICAgZW52ZWxvcGVOb2RlLmNvbm5lY3QodGhpcy5nYWluTm9kZSk7XG5cbiAgICAgIC8vIG1ha2Ugc291cmNlXG4gICAgICB2YXIgc291cmNlID0gYXVkaW9Db250ZXh0LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuXG4gICAgICBzb3VyY2UuYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICBzb3VyY2UucGxheWJhY2tSYXRlLnZhbHVlID0gcmVzYW1wbGluZ1JhdGU7XG4gICAgICBzb3VyY2UuY29ubmVjdChlbnZlbG9wZU5vZGUpO1xuICAgICAgZW52ZWxvcGVOb2RlLmNvbm5lY3QodGhpcy5nYWluTm9kZSk7XG5cbiAgICAgIHNvdXJjZS5zdGFydChncmFpblRpbWUsIGdyYWluUG9zaXRpb24pO1xuICAgICAgc291cmNlLnN0b3AoZ3JhaW5UaW1lICsgZ3JhaW5EdXJhdGlvbiAvIHJlc2FtcGxpbmdSYXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ3JhaW5QZXJpb2Q7XG4gIH1cbjtyZXR1cm4gR3JhbnVsYXJFbmdpbmU7fSkoKTtcbm1vZHVsZS5leHBvcnRzID0gR3JhbnVsYXJFbmdpbmU7IiwiLyogR2VuZXJhdGVkIGJ5IGVzNi10cmFuc3BpbGVyIHYgMC43LjE0LTIgKi9cblwidXNlIHN0cmljdFwiO1xuXG52YXIgU2NoZWR1bGVkID0gKGZ1bmN0aW9uKCl7dmFyIERQJDAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbiAgZnVuY3Rpb24gU2NoZWR1bGVkKHBhcmVudCkge1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIC8vIHdyaXR0ZW4gYnkgc2NoZWR1bGVyIG9ubHkgb3RoZXJzIHJlYWRcbiAgICB0aGlzLnNjaGVkdWxlciA9IG51bGw7XG4gIH1PYmplY3QuZGVmaW5lUHJvcGVydGllcyhTY2hlZHVsZWQucHJvdG90eXBlLCB7dGltZToge1wiZ2V0XCI6IHRpbWUkZ2V0JDAsIFwiY29uZmlndXJhYmxlXCI6IHRydWUsIFwiZW51bWVyYWJsZVwiOiB0cnVlfX0pO0RQJDAoU2NoZWR1bGVkLCBcInByb3RvdHlwZVwiLCB7XCJjb25maWd1cmFibGVcIjogZmFsc2UsIFwiZW51bWVyYWJsZVwiOiBmYWxzZSwgXCJ3cml0YWJsZVwiOiBmYWxzZX0pO1xuXG4gIC8vIHRvIGJlIGltcGxlbWVudGVkIGJ5IGluc3RhbmNlXG4gIFNjaGVkdWxlZC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbih0aW1lKSB7XG4gICAgcmV0dXJuIEluZmluaXR5O1xuICB9XG5cbiAgLy8gdG8gYmUgaW1wbGVtZW50ZWQgYnkgaW5zdGFuY2VcbiAgU2NoZWR1bGVkLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24odGltZSkge1xuICAgIHJldHVybiBJbmZpbml0eTtcbiAgfVxuXG4gIFNjaGVkdWxlZC5wcm90b3R5cGUucmVzY2hlZHVsZSA9IGZ1bmN0aW9uKHRpbWUpIHtcbiAgICB0aGlzLnNjaGVkdWxlci5yZXNjaGVkdWxlKHRoaXMsIHRpbWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGltZSRnZXQkMCgpIHtcbiAgICByZXR1cm4gdGhpcy5zY2hlZHVsZXIudGltZTtcbiAgfVxuO3JldHVybiBTY2hlZHVsZWQ7fSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTY2hlZHVsZWQ7IiwiLyogR2VuZXJhdGVkIGJ5IGVzNi10cmFuc3BpbGVyIHYgMC43LjE0LTIgKi9cblwidXNlIHN0cmljdFwiO1xuXG52YXIgVHJhbnNwb3J0ZWQgPSAoZnVuY3Rpb24oKXt2YXIgRFAkMCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbiBcbiBmdW5jdGlvbiBUcmFuc3BvcnRlZChwYXJlbnQpIHtcbiAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgLy8gd3JpdHRlbiBieSB0cmFuc3BvcnRlclxuICAgdGhpcy50cmFuc3BvcnRlciA9IG51bGw7XG4gfU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFRyYW5zcG9ydGVkLnByb3RvdHlwZSwge3Bvc2l0aW9uOiB7XCJnZXRcIjogcG9zaXRpb24kZ2V0JDAsIFwiY29uZmlndXJhYmxlXCI6IHRydWUsIFwiZW51bWVyYWJsZVwiOiB0cnVlfX0pO0RQJDAoVHJhbnNwb3J0ZWQsIFwicHJvdG90eXBlXCIsIHtcImNvbmZpZ3VyYWJsZVwiOiBmYWxzZSwgXCJlbnVtZXJhYmxlXCI6IGZhbHNlLCBcIndyaXRhYmxlXCI6IGZhbHNlfSk7XG5cbiAvLyB0byBiZSBpbXBsZW1lbnRlZCBieSBpbnN0YW5jZVxuIFRyYW5zcG9ydGVkLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICByZXR1cm4gSW5maW5pdHk7XG4gfVxuXG4gLy8gdG8gYmUgaW1wbGVtZW50ZWQgYnkgaW5zdGFuY2VcbiBUcmFuc3BvcnRlZC5wcm90b3R5cGUuZXhlY3V0ZSA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICByZXR1cm4gSW5maW5pdHk7XG4gfVxuXG4gVHJhbnNwb3J0ZWQucHJvdG90eXBlLnJlc2NoZWR1bGUgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuICAgdGhpcy50cmFuc3BvcnRlci5yZXNjaGVkdWxlKHRoaXMsIHBvc2l0aW9uKTtcbiB9XG5cbiBmdW5jdGlvbiBwb3NpdGlvbiRnZXQkMCgpIHtcbiAgIGlmKHRoaXMudHJhbnNwb3J0ZXIpXG4gICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydGVyLnBvc2l0aW9uO1xuXG4gICByZXR1cm4gMC4wO1xuIH1cblxuO3JldHVybiBUcmFuc3BvcnRlZDt9KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zcG9ydGVkOyJdfQ==
