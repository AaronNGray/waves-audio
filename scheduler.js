(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* Generated by es6-transpiler v 0.7.14-2 *//**
 * @fileoverview WAVE audio library element: an event queue manager.
 * @author Karim.Barkati@ircam.fr, Norbert.Schnell@ircam.fr, Victor.Saiz@ircam.fr
 * @version 0.3.2
 * @description An event is made of an object (such as an engine) and a value (such as a time or a position).
 */

'use strict';

var EventQueue = (function(){var DP$0 = Object.defineProperty;
  
  function EventQueue() {
    if (!(this instanceof EventQueue)) throw new Error('You seem to have forgotten the new operatorâ€¦ shame on you!');

    this.eventList = [];
    this.name = require('./package.json').name;
    
    this.__isBackward = false;
  }Object.defineProperties(EventQueue.prototype, {length: {"get": length$get$0, "configurable": true, "enumerable": true}});DP$0(EventQueue, "prototype", {"configurable": false, "enumerable": false, "writable": false});

  /**
   * Compare two events based on their value only.
   * @private
   * @param {Event} a
   * @param {Event} b
   */
  EventQueue.prototype.__compare = function(a, b) {
    return a[1] - b[1];
  }

  /**
   * Compare two events based on their value only, in reverse order.
   * @private
   * @param {Event} a
   * @param {Event} b
   */
  EventQueue.prototype.__reverseCompare = function(a, b) {
    return b[1] - a[1];
  }

  /**
   * Get the index of an object in the event list.
   * @private
   */
  EventQueue.prototype.__indexOf = function(object) {
    var i = null;
    for (i = 0; i < this.__eventList.length; i++) {
      if (object === this.__eventList[i][0]) {
        return i;
      }
    }
    return -1;
  }

  // this.length helper
  function length$get$0() {
    return this.__eventList.length;
  }

  /**
   * Insert an event (an ordered pair [object, value]) into eventList.
   * @public
   * @param {Object} object reference
   * @param {Float} value for scheduling or sequencing, ie either time or position value
   */
  EventQueue.prototype.insert = function(object, value) {
    this.pushEvent(object, value);
    this.sort();
  }

  /**
   * Push an event (an ordered pair [object, value]) into eventList without sorting.
   * @public
   * @param {Object} object reference
   * @param {Float} value for scheduling or sequencing, ie either time or position value
   */
  EventQueue.prototype.pushEvent = function(object, value) {
    this.__eventList.push([object, value]);
  }

  /**
   * Remove an event from the event list.
   * @public
   * @chainable
   * @param {Object} object of the event to remove (1 to 1 hypothesis)
   */
  EventQueue.prototype.remove = function(object) {
    if (object) {
      // Search for the index of the object in the list (not the full event pair).
      var index = this.__indexOf(object);
      if (index < 0) {
        throw new Error("remove(): no object");
      } else {
        this.__eventList.splice(index, 1);
      }
      return this; // for chainability
    } else {
      throw new ReferenceError("remove(): no object");
    }
  }

  /**
   * Move an event (an ordered pair [object, value]) into the event list.
   * @public
   * @param {Object} object reference
   * @param {Float} value for scheduling or sequencing, i.e. either time or position value
   * @todo Optimize algorithm: at least, test if moving is necessary?
   */
  EventQueue.prototype.move = function(object, value) {
    this.remove(object);
    this.insert(object, value);
  }

  /**
   * Move the first event of the event list only if needed.
   * @public
   * @param {Object} object reference
   * @param {Float} value for scheduling or sequencing, ie either time or position value
   */
  EventQueue.prototype.moveFirstEvent = function(object, value) {
    if (this.__isBackward) {
      if (value > this.getValueOfIndex(1)) {
        this.__eventList[0][1] = value;
      } else {
        this.__eventList.shift();
        this.insert(object, value);
      }
    } else {
      if (value <= this.getValueOfIndex(1)) {
        this.__eventList[0][1] = value;
      } else {
        this.__eventList.shift();
        this.insert(object, value);
      }
    }
  }

  /**
   * Get first event from the event list.
   * @public
   */
  EventQueue.prototype.getFirstEvent = function() {
    return this.__eventList[0];
  }

  /**
   * Get object of first event from the event list.
   * @public
   */
  EventQueue.prototype.getFirstObject = function() {
    return this.__eventList[0][0];
  }

  /**
   * Get value of first event from the event list (either time or position).
   * @public
   */
  EventQueue.prototype.getFirstValue = function() {
    return this.__eventList[0][1];
  }

  /**
   * Get value of the specified event from the event list (either time or position).
   * @public
   */
  EventQueue.prototype.getValueOfIndex = function(index) {
    if (this.__eventList[index]) {
      return this.__eventList[index][1];
    } else {
      return Infinity;
    }
  }

  /**
   * Flush the event list.
   * @public
   */
  EventQueue.prototype.flush = function() {
    this.__eventList = [];
  }


  /**
   * Sort the whole event list.
   * @public
   */
  EventQueue.prototype.sort = function() {
    if (this.__isBackward) {
      this.__eventList.sort(this.__reverseCompare);
    } else {
      this.__eventList.sort(this.__compare);
    }
  }

;return EventQueue;})();

module.exports = EventQueue;
},{"./package.json":2}],2:[function(require,module,exports){
module.exports={
  "name": "event-queue",
  "version": "0.2.0",
  "description": "WAVE audio library module for an event queue",
  "main": "index.js",
  "exports": "createEventQueue",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Karim Barkati",
  "authors": [
    "Karim Barkati",
    "Norbert Schnell",
    "Victor Saiz"
  ],
  "license": "BSD-3-Clause",
  "repository": {
    "type": "git",
    "url": "http://github.com/Ircam-RnD/event-queue.git"
  },
  "devDependencies": {
    "module-boilerplate": "git://github.com/Ircam-RnD/module-boilerplate.git#master",
    "fs-utils" : "0.4.3",
    "browserify": "~4.1.2",
    "mocha": "~1.17.1",
    "chai": "~1.9.0",
    "blanket": "~1.1.6",
    "gulp": "~3.8.2"
  }
}
},{}],3:[function(require,module,exports){
/* Generated by es6-transpiler v 0.7.14-2 */
/**
 * @fileoverview WAVE audio library element: the main audio scheduler of the library,
 * as a singleton in the global variable 'wako'.
 * @author Karim.Barkati@ircam.fr, Norbert.Schnell@ircam.fr, Victor.Saiz@ircam.fr
 * @version 5.1.0
 */

'use strict';

// Ensure there is a globally available "audioContext" instance of the web audio AudioContext.
window.audioContext = window.audioContext || new AudioContext();

var Scheduler = require("../scheduler");

var MainScheduler = (function(){var DP$0 = Object.defineProperty;

  function MainScheduler() {

    this.name = "wako.scheduler"
    // How frequently to call scheduling function (sec).
    this.schedulingPeriod =  0.025;
    // How far ahead to schedule events (sec), should be greater than schedulingPeriod.
    this.scheduleAheadTime = 0.1; 
    this.scheduler = new Scheduler();

    this.timerID = null;

    this.scheduler.setParent(this, this.onRunningStatusChange);
    return this;
  }DP$0(MainScheduler, "prototype", {"configurable": false, "enumerable": false, "writable": false});

  /**
   * React to running status change of the main scheduler through this callback.
   * @private
   */
  MainScheduler.prototype.onRunningStatusChange = function(bool) {
    console.log("onRunningStatusChange (mainScheduler)", bool);
    if (bool) {
      this.parent.start();
    } else {
      this.parent.stop();
    }
  }

  /**
   * Coarse-grained scheduling of audio events.
   * @public
   */
  MainScheduler.prototype.start = function() {
    var that = this; // for the setTimeout closure, faster than a bind()
    var nextEventTime = Infinity;

    // While there are events that will need to be played before the next interval, 
    // schedule them and advance the time pointer.
    nextEventTime = this.scheduler.getNextTime();
    while (nextEventTime <= audioContext.currentTime + this.scheduleAheadTime) {
      // nextEventTime = this.scheduler.makeEventAndReturnNextTime();
      this.scheduler.makeNextEvent();
      nextEventTime = this.scheduler.getNextTime();
    }
    // Store the setTimeout ID to allow removing.
    this.timerID = setTimeout(function() {
      that.start();
    }, that.schedulingPeriod * 1000);
  }

  /**
   * Stop the scheduling loop.
   * @public
   */
  MainScheduler.prototype.stop = function() {
    clearTimeout(this.timerID);
  }

  /**
   * Forward the add() method to the internal scheduler.
   * @public
   * @chainable
   */
  MainScheduler.prototype.add = function(object) {
    this.scheduler.add(object);
    return this;
  }

  /**
   * Forward the remove() method to the internal scheduler.
   * @public
   * @chainable
   */
  MainScheduler.prototype.remove = function(object) {
    this.scheduler.remove(object);
    return this;
  }

  /**
   * Get scheduling period.
   * @public
   */
  MainScheduler.prototype.getSchedulingPeriod = function() {
    return this.schedulingPeriod;
  }

  /**
   * Get current time from the Web Audio context.
   * @public
   */
  MainScheduler.prototype.getCurrentTime = function() {
    return audioContext.currentTime;
  }

;return MainScheduler;})();

// Ensure there is a globally available "wako" instance of the WAVE's global name-space.
window.wako = window.wako || {};

// Provide wako with a MainScheduler singleton, only if not already there.
wako.scheduler = wako.scheduler || new MainScheduler();
},{"../scheduler":4}],4:[function(require,module,exports){
/* Generated by es6-transpiler v 0.7.14-2 */
/**
 * @fileoverview WAVE audio library element: a web audio scheduler, without time loop.
 * @author Karim.Barkati@ircam.fr, Norbert.Schnell@ircam.fr, Victor.Saiz@ircam.fr
 * @version 4.1.0
 */

'use strict';

var EventQueue = require("../event-queue");

// Make a global instance of the wako.scheduler available
require("../main-scheduler");

var Scheduler = (function(){var DP$0 = Object.defineProperty;

  function Scheduler(optName) {

    if (!this || this === window)
      throw new SyntaxError("You seem to have forgotten the new operator; Shame on you!");

    this.name = optName || "Scheduler";
    this.isRunning = false;    
    this.eventQueue = null;
    this.nextEventTime = Infinity
    this.schedulablesList = []
    this.parent = null
    // required method, from the parent
    this.runningStatusChangeCallback = null;
    this.eventQueue = new EventQueue();

    return this;
  }DP$0(Scheduler, "prototype", {"configurable": false, "enumerable": false, "writable": false});

  /**
   * Schedule a schedulable object and add it to the scheduling list.
   * @public
   * @chainable
   */
  Scheduler.prototype.add = function(object) {
    object.scheduler = this;
    var length = this.schedulablesList.push(object);
    var index = length - 1;
    var name = object.name ? object.name : object.schedulingID;
    console.log("add():", this.name, "scheduling element #" + index + ' \"' + name + '\"');
    if (!this.isRunning) {
      // this.resetAll();
    }
    return this;
  }

  /**
   * Unschedule a schedulable object and remove it from the scheduling list.
   * @public
   * @chainable
   */
  Scheduler.prototype.remove = function(object) {
    // Search for the object in the scheduling list.
    var index = this.schedulablesList.indexOf(object);

    if (index < 0) {
      throw new Error("remove(): object not found," + object);
    } else {
      this.schedulablesList.splice(index, 1);
      console.log("Unscheduling element #" + index, object.name ? '\"' + object.name + '\"' : "", object.schedulingID);
      // When the scheduling list is empty, stop scheduling.
      if (this.schedulablesList.length <= 0) {
        this.stop();
      }
    }
    return this;
  }

  /**
   * Start scheduling.
   * @private
   */
  Scheduler.prototype.start = function() {
    if (!this.isRunning) {
      this.isRunning = true;
      console.log("Scheduling on", "(" + this.name + ")");
      this.runningStatusChangeCallback(this.isRunning);
    }
  }

  /**
   * Stop scheduling.
   * @private
   */
  Scheduler.prototype.stop = function() {
    this.isRunning = false;
    console.log("Scheduling off (" + this.name + ")");
    this.runningStatusChangeCallback(this.isRunning);
  }

  /**
   * Reset all schedulables objects of this scheduler.
   * @public
   */
  Scheduler.prototype.reset = function() {
    this.eventQueue.flush();
    this.insertAll();
  }

  /**
   * Push all events into the event queue and sort it afterward.
   * @private
   */
  Scheduler.prototype.insertAll = function() {
    var time = null;
    var element = null;
    // console.log("schedulablesList: ", this.schedulablesList);
    for (var i = this.schedulablesList.length - 1; i >= 0; i--) {
      element = this.schedulablesList[i];
      time = element.resetAndReturnNextTime(this.getCurrentTime());
      this.eventQueue.pushEvent(element, time);
    }
    this.eventQueue.sort();
  }

  /**
   * Insert an event into the event queue.
   * @public
   */
  Scheduler.prototype.insertEvent = function(object, time) {
    if (time !== Infinity) {
      this.eventQueue.Insert(object, time);
    }
  }

  /**
   * Get current time from wako.scheduler.
   * @public
   */
  Scheduler.prototype.getCurrentTime = function() {
    return wako.scheduler.getCurrentTime();
  }

  /**
   * Update next scheduling time of a scheduled object.
   * @private
   * @param {Object} object reference
   * @param {Float} new scheduling time of its next event; "Infinity" means "remove from scheduling"
   */
  Scheduler.prototype.updateNextTime = function(object, time) {
    if (time === Infinity) {
      this.eventQueue.remove(object);
      // If the queue is empty, stop scheduling.
      if (this.eventQueue.length <= 0) {
        this.stop();
      }
    } else {
      if (this.eventQueue.indexOf(object) < 0) {
        this.eventQueue.insert(object, time);
      } else {
        this.eventQueue.move(object, time);
      }
      this.start();
    }
  }

  /**
   * Set parent and status change callback.
   * @private
   * @param {Object} parent The parent of a scheduler has to be set.
   * @param {Function} callback This required callback triggers the parent,
   * with a boolean on running status change.
   */
  Scheduler.prototype.setParent = function(object, callback) {
    this.parent = object;
    this.runningStatusChangeCallback = callback;
  }


  /////////////////////////////
  /// Transporting methods ///
  /////////////////////////////

  /**
   * Call the event making method of the first schedulable object,
   * and then update the first event of the queue.
   * @public
   */
  Scheduler.prototype.makeNextEvent = function() {
    var engine = this.eventQueue.getFirstObject();
    this.nextEventTime = engine.makeEventAndReturnNextTime();
    this.eventQueue.moveFirstEvent(engine, this.nextEventTime);
  }

  /**
   * Get next event time by querying it in the event queue.
   * @public
   */
  Scheduler.prototype.getNextTime = function() {
    if (this.schedulablesList.length > 0) {
      this.nextEventTime = this.eventQueue.getFirstValue();
      return this.nextEventTime;
    } else {
      return Infinity;
    }
  }

;return Scheduler;})();

module.exports = Scheduler;
},{"../event-queue":1,"../main-scheduler":3}]},{},[4])
//# sourceMappingURL=data:application/json;base64,
