(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* Generated by es6-transpiler v 0.7.14-2 *//**
 * @fileoverview WAVE audio library element: an event queue manager.
 * @author Karim.Barkati@ircam.fr, Norbert.Schnell@ircam.fr, Victor.Saiz@ircam.fr
 * @version 0.3.2
 * @description An event is made of an object (such as an engine) and a time (such as a time or a position).
 */

'use strict';

var EventQueue = (function(){var DP$0 = Object.defineProperty;

  function EventQueue() {
    this.__eventList = [];
    this.__isBackward = false;
  }Object.defineProperties(EventQueue.prototype, {length: {"get": length$get$0, "configurable": true, "enumerable": true}});DP$0(EventQueue, "prototype", {"configurable": false, "enumerable": false, "writable": false});

  /**
   * Clear the event list.
   * @public
   */
  EventQueue.prototype.clear = function() {
    this.__eventList = [];
  }

  /**
   * Compare two events based on their time only.
   * @private
   * @param {Event} a
   * @param {Event} b
   */
  EventQueue.prototype.__compare = function(a, b) {
    return a[1] - b[1];
  }

  /**
   * Compare two events based on their time only, in reverse order.
   * @private
   * @param {Event} a
   * @param {Event} b
   */
  EventQueue.prototype.__reverseCompare = function(a, b) {
    return b[1] - a[1];
  }


  /**
   * Sort the whole event list.
   * @public
   */
  EventQueue.prototype.__sort = function() {
    if (this.__isBackward) {
      this.__eventList.sort(this.__reverseCompare);
    } else {
      this.__eventList.sort(this.__compare);
    }
  }


  /**
   * Get the index of an object in the event list.
   */
  EventQueue.prototype.__indexOf = function(object) {
    for (var i = 0; i < this.__eventList.length; i++) {
      if (object === this.__eventList[i][0]) {
        return i;
      }
    }

    return -1;
  }

  // this.length helper
  function length$get$0() {
    return this.__eventList.length;
  }

  /**
   * Insert an event (an ordered pair [object, time]) into eventList.
   * @public
   * @param {Object} object reference
   * @param {Float} time for scheduling or sequencing, ie either time or position time
   */
  EventQueue.prototype.insert = function(object, time) {var sort = arguments[2];if(sort === void 0)sort = true;

    if (time < Infinity) {
      var index = this.__indexOf(object);

      if (index < 0) {
        // add new event
        this.__eventList.push([object, time]);
        this.__sort();
      } else {
        // update time of existing event
        this.__eventList[index][1] = time;

        // move first event if it is not first anymore
        if (index === 0 && this.__eventList.length > 1) {
          var secondTime = this.__eventList[1][1];

          if ((!this.__isBackward && time > secondTime) || (this.__isBackward && time <= secondTime))
            this.__sort();
        }
      }
    } else {
      this.remove(object);
    }
  }

  /**
   * Remove an event from the event list.
   * @public
   * @chainable
   * @param {Object} object of the event to remove (1 to 1 hypothesis)
   */
  EventQueue.prototype.remove = function(object) {
    // Search for the index of the object in the list (not the full event pair).
    var index = this.__indexOf(object);

    if (index >= 0) {
      this.__eventList.splice(index, 1);

      return this; // for chainability
    }
  }

  /**
   * Get first object from the event list.
   * @public
   */
  EventQueue.prototype.getFirstObject = function() {
    if (this.__eventList.length > 0)
      return this.__eventList[0][0];

    return null;
  }

  /**
   * Get time of first event from the event list (either time or position).
   * @public
   */
  EventQueue.prototype.getFirstTime = function() {
    if (this.__eventList.length > 0)
      return this.__eventList[0][1];

    return Infinity;
  }

  /**
   * Get time of the specified event from the event list (either time or position).
   * @public
   */
  EventQueue.prototype.getTimeAtIndex = function(index) {
    if (this.__eventList[index])
      return;

    return Infinity;
  }
;return EventQueue;})();

module.exports = EventQueue;
},{}],2:[function(require,module,exports){
/* Generated by es6-transpiler v 0.7.14-2 *//**
 * @fileoverview WAVE audio library element: a web audio scheduler, without time loop.
 * @author Karim.Barkati@ircam.fr, Norbert.Schnell@ircam.fr, Victor.Saiz@ircam.fr
 * @version 4.1.0
 */

'use strict';

var EventQueue = require("../event-queue");

var Scheduler = (function(){var DP$0 = Object.defineProperty;

  function Scheduler(parent) {
    this.__objects = []
    this.__parent = parent;
    this.__eventQueue = new EventQueue();
  }DP$0(Scheduler, "prototype", {"configurable": false, "enumerable": false, "writable": false});

  /**
   * Schedule a schedulable object and add it to the scheduling list.
   * @public
   */
  Scheduler.prototype.add = function(object) {
    var firstTime = this.__eventQueue.getFirstTime();

    // assign scheduler to schedulable object
    object.scheduler = this;

    // add to list of schedulable objects
    this.__objects.push(object);

    // reset object and get next scheduling time
    var time = object.reset(this.__parent.currentTime); // TODO: fix me to leave me

    // add event to queue of scheduled events
    this.__eventQueue.insert(object, time);

    var nextTime = this.__eventQueue.getFirstTime();

    if (nextTime !== firstTime)
      this.__parent.reschedule(nextTime);
  }

  /**
   * Unschedule a schedulable object and remove it from the scheduling list.
   */
  Scheduler.prototype.remove = function(object) {
    var index = this.__objects.indexOf(object);
    var firstTime = this.__eventQueue.getFirstTime();

    if (index >= 0) {
      // remove from object list
      this.__objects.splice(index, 1);

      // remove event from queue of scheduled events
      this.__eventQueue.remove(object);

    // reset schedulable object
      object.scheduler = null;

      var nextTime = this.__eventQueue.getFirstTime();

      if (nextTime !== firstTime)
        this.__parent.reschedule(nextTime);
    }
  }

  /**
   * Update next scheduling time of a scheduled object.
   * @param {Object} object reference
   * @param {Float} new scheduling time of its next event; "Infinity" means "remove from scheduling"
   */
  Scheduler.prototype.reschedule = function(object, time) {
    var firstTime = this.__eventQueue.getFirstTime();

    if (time === Infinity) {
      this.__eventQueue.remove(object);

      if (this.__eventQueue.empty) {
        this.__parent.reschedule(time);
      }
    } else {
      var wasEmpty = this.__eventQueue.empty;

      this.__eventQueue.insert(object, time);

      var nextTime = this.__eventQueue.getFirstTime();

      if (nextTime !== firstTime)
        this.__parent.reschedule(nextTime);
    }
  }

  /***********************************************************************
   *
   *  Functions called by parent
   *
   */

  /**
   * Reset all schedulables objects of this scheduler and return first time.
   */
  Scheduler.prototype.reset = function() {
    this.__eventQueue.clear();

    var object, time;

    for (var i = this.__objects.length - 1; i > 0; i--) {
      object = this.__objects[i];
      time = object.reset(this.time);
      this.__eventQueue.insert(object, time, false); // don't sort
    }

    object = this.__objects[0];
    time = object.reset(this.time);
    this.__eventQueue.insert(object, time, true); // now sort

    return this.__eventQueue.getFirstTime();
  }

  /**
   * Call the event making method of the first schedulable object,
   * and then update the first event of the queue.
   * @public
   */
  Scheduler.prototype.execute = function() {
    var object = this.__eventQueue.getFirstObject();
    var time = this.__eventQueue.getFirstTime();
    var nextTime = object.execute(time);

    this.__eventQueue.insert(object, nextTime);

    return this.__eventQueue.getFirstTime();
  }
;return Scheduler;})();

module.exports = Scheduler;
},{"../event-queue":1}]},{},[2])
//# sourceMappingURL=data:application/json;base64,
