!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.Transport=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/* Generated by es6-transpiler v 0.7.14-2 */
// instantiates an audio context in the global scope if not there already
var context = window.audioContext || new AudioContext() || new webkitAudioContext();
window.audioContext = context;
module.exports = context;
},{}],2:[function(_dereq_,module,exports){
/* written in ECMAscript 6 */
/**
 * @fileoverview WAVE audio priority queue used by scheduler and transports
 * @author Norbert.Schnell@ircam.fr, Victor.Saiz@ircam.fr, Karim.Barkati@ircam.fr
 *
 * First rather stupid implementation to be optimized...
 */
'use strict';

var PriorityQueue = (function(){var PRS$0 = (function(o,t){o["__proto__"]={"a":t};return o["a"]===t})({},{});var DP$0 = Object.defineProperty;var GOPD$0 = Object.getOwnPropertyDescriptor;var MIXIN$0 = function(t,s){for(var p in s){if(s.hasOwnProperty(p)){DP$0(t,p,GOPD$0(s,p));}}return t};var DPS$0 = Object.defineProperties;var proto$0={};

  function PriorityQueue() {
    this.__objects = [];
    this.reverse = false;
  }DPS$0(PriorityQueue.prototype,{head: {"get": head$get$0, "configurable":true,"enumerable":true}});DP$0(PriorityQueue,"prototype",{"configurable":false,"enumerable":false,"writable":false});

  /* Get the index of an object in the object list */
  proto$0.__objectIndex = function(object) {
    for (var i = 0; i < this.__objects.length; i++) {
      if (object === this.__objects[i][0]) {
        return i;
      }
    }

    return -1;
  };

  /* Withdraw an object from the object list */
  proto$0.__removeObject = function(object) {
    var index = this.__objectIndex(object);

    if (index >= 0)
      this.__objects.splice(index, 1);

    if (this.__objects.length > 0)
      return this.__objects[0][1]; // return time of first object

    return Infinity;
  };

  proto$0.__sortObjects = function() {
    if (!this.reverse)
      this.__objects.sort(function(a, b) {
        return a[1] - b[1];
      });
    else
      this.__objects.sort(function(a, b) {
        return b[1] - a[1];
      });
  };

  /**
   * Insert an object to the queue
   * (for this primitive version: prevent sorting for each element by calling with "false" as third argument)
   */
  proto$0.insert = function(object, time) {var sort = arguments[2];if(sort === void 0)sort = true;
    if (time !== Infinity && time != -Infinity) {
      // add new object
      this.__objects.push([object, time]);

      if (sort)
        this.__sortObjects();

      return this.__objects[0][1]; // return time of first object
    }

    return this.__removeObject(object);
  };

  /**
   * Move an object to another time in the queue
   */
  proto$0.move = function(object, time) {
    if (time !== Infinity && time != -Infinity) {
      var index = this.__objectIndex(object);

      if (index < 0)
        this.__objects.push([object, time]); // add new object
      else
        this.__objects[index][1] = time; // update time of existing object

      this.__sortObjects();

      return this.__objects[0][1]; // return time of first object
    }

    return this.__removeObject(object);
  };

  /**
   * Remove an object from the queue
   */
  proto$0.remove = function(object) {
    return this.__removeObject(object);
  };

  /**
   * Clear queue
   */
  proto$0.clear = function() {
    this.__objects.length = 0; // clear object list
    return Infinity;
  };

  /**
   * Get first object in queue
   */
  function head$get$0() {
    return this.__objects[0][0];
  }
MIXIN$0(PriorityQueue.prototype,proto$0);proto$0=void 0;return PriorityQueue;})();

module.exports = PriorityQueue;
},{}],3:[function(_dereq_,module,exports){
/* written in ECMAscript 6 */
/**
 * @fileoverview WAVE scheduler singleton based on audio time
 * @author Norbert.Schnell@ircam.fr, Victor.Saiz@ircam.fr, Karim.Barkati@ircam.fr
 */
'use strict';

var audioContext = _dereq_("../audio-context");
var PriorityQueue = _dereq_("../priority-queue");
var TimeEngine = _dereq_("../time-engine");

function arrayRemove(array, value) {
  var index = array.indexOf(value);

  if (index >= 0) {
    array.splice(index, 1);
    return true;
  }

  return false;
}

var Scheduler = (function(){var PRS$0 = (function(o,t){o["__proto__"]={"a":t};return o["a"]===t})({},{});var DP$0 = Object.defineProperty;var GOPD$0 = Object.getOwnPropertyDescriptor;var MIXIN$0 = function(t,s){for(var p in s){if(s.hasOwnProperty(p)){DP$0(t,p,GOPD$0(s,p));}}return t};var DPS$0 = Object.defineProperties;var proto$0={};
  function Scheduler() {
    this.__queue = new PriorityQueue();
    this.__scheduledEngines = [];

    this.__currentTime = null;
    this.__nextTime = Infinity;
    this.__timeout = null;

    /**
     * scheduler (setTimeout) period
     * @type {Number}
     */
    this.period = 0.025;

    /**
     * scheduler lookahead time (> period)
     * @type {Number}
     */
    this.lookahead = 0.1;
  }DPS$0(Scheduler.prototype,{currentTime: {"get": currentTime$get$0, "configurable":true,"enumerable":true}});DP$0(Scheduler,"prototype",{"configurable":false,"enumerable":false,"writable":false});

  // global setTimeout scheduling loop
  proto$0.__tick = function() {var this$0 = this;
    while (this.__nextTime <= audioContext.currentTime + this.lookahead) {
      this.__currentTime = this.__nextTime;

      var nextEngine = this.__queue.head;
      var nextEngineTime = Math.max(nextEngine.advanceTime(this.__currentTime), this.__currentTime);

      this.__nextTime = this.__queue.move(nextEngine, nextEngineTime);
    }

    this.__currentTime = null;
    this.__timeout = null;

    if (this.__nextTime !== Infinity) {
      this.__timeout = setTimeout(function()  {
        this$0.__tick();
      }, this.period * 1000);
    }
  };

  proto$0.__reschedule = function(time) {
    if (this.__nextTime !== Infinity) {
      if (!this.__timeout)
        this.__tick();
    } else if (this.__timeout) {
      clearTimeout(this.__timeout);
      this.__timeout = null;
    }
  };

  /**
   * Get scheduler time
   * @return {Number} current scheduler time including lookahead
   */
  function currentTime$get$0() {
    return this.__currentTime || audioContext.currentTime + this.lookahead;
  }

  /**
   * Add a callback to the scheduler
   * @param {Function} callback function(time, audioTime) to be called
   * @param {Number} period callback period (default is 0 for one-shot)
   * @param {Number} delay of first callback (default is 0)
   * @return {Object} scheduled object that can be used to call remove and reschedule
   */
  proto$0.callback = function(callback) {var period = arguments[1];if(period === void 0)period = 0;var delay = arguments[2];if(delay === void 0)delay = 0;
    var object = {
      period: period || Infinity,
      executeNext: function(time, audioTime) {
        callback(time, audioTime);
        return time + this.period;
      }
    };

    this.__nextTime = this.__queue.insert(object, this.currentTime + delay);
    this.__reschedule();

    return object;
  };

  /**
   * Add a time engine to the scheduler
   * @param {Object} engine time engine to be added to the scheduler
   * @param {Number} delay scheduling delay time
   * @param {Function} function to get current position
   */
  proto$0.add = function(engine) {var delay = arguments[1];if(delay === void 0)delay = 0;var getCurrentPosition = arguments[2];if(getCurrentPosition === void 0)getCurrentPosition = null;var this$0 = this;
    if (!engine.master) {
      if (engine.implementsScheduled) {
        this.__scheduledEngines.push(engine);

        engine.setScheduled(this, function(time)  {
          this$0.__nextTime = this$0.__queue.move(engine, time);
          this$0.__reschedule();
        }, function()  {
          return this$0.currentTime;
        }, getCurrentPosition);

        this.__nextTime = this.__queue.insert(engine, this.currentTime + delay);
        this.__reschedule();
      } else {
        throw new Error("object cannot be added to scheduler");
      }
    } else {
      throw new Error("object has already been added to a master");
    }
  };

  /**
   * Remove time engine from the scheduler
   * @param {Object} engine time engine or callback to be removed from the scheduler
   */
  proto$0.remove = function(engine) {
    if (arrayRemove(this.__scheduledEngines, engine)) {
      engine.resetScheduled();

      this.__nextTime = this.__queue.remove(engine);
      this.__reschedule();
    } else {
      throw new Error("object has not been added to this scheduler");
    }
  };

  /**
   * Reschedule a scheduled time engine or callback
   * @param {Object} engine time engine or callback to be rescheduled
   * @param {Number} time time when to reschedule
   */
  proto$0.reset = function(engine, time) {
    if (engine.master === this) {
      this.__nextTime = this.__queue.move(engine, time);
      this.__reschedule();
    } else {
      throw new Error("object has not been added to this scheduler");
    }
  };
MIXIN$0(Scheduler.prototype,proto$0);proto$0=void 0;return Scheduler;})();

module.exports = new Scheduler; // export scheduler singleton
},{"../audio-context":1,"../priority-queue":2,"../time-engine":4}],4:[function(_dereq_,module,exports){
/* written in ECMAscript 6 */
/**
 * @fileoverview WAVE audio time engine base class
 * @author Norbert.Schnell@ircam.fr, Victor.Saiz@ircam.fr, Karim.Barkati@ircam.fr
 */
"use strict";

var audioContext = _dereq_("../audio-context");

var TimeEngine = (function(){var DP$0 = Object.defineProperty;var MIXIN$0 = function(t,s){for(var p in s){if(s.hasOwnProperty(p)){DP$0(t,p,Object.getOwnPropertyDescriptor(s,p));}}return t};var $proto$0={};
  function TimeEngine() {
    /**
     * Master (scheduler, transport, player) to which the time engine is synchronized
     * @type {Object}
     */
    this.master = null;

    /**
     * Interface used by teh current master
     * @type {String}
     */
    this.interface = null;

    /**
     * Transport start position of the engine (handled by )
     * @type {Object}
     */
    this.transportStartPosition = 0;

    /**
     * Output audio node
     * @type {Object}
     */
    this.outputNode = null;
  }Object.defineProperties(TimeEngine.prototype, {implementsScheduled: {"get": implementsScheduled$get$0, "configurable": true, "enumerable": true}, implementsTransported: {"get": implementsTransported$get$0, "configurable": true, "enumerable": true}, implementsSpeedControlled: {"get": implementsSpeedControlled$get$0, "configurable": true, "enumerable": true}, currentTime: {"get": currentTime$get$0, "configurable": true, "enumerable": true}, currentPosition: {"get": currentPosition$get$0, "configurable": true, "enumerable": true}});DP$0(TimeEngine, "prototype", {"configurable": false, "enumerable": false, "writable": false});

  /**
   * Check whether the time engine implements the scheduled interface
   **/
  function implementsScheduled$get$0() {
    return (this.advanceTime && this.advanceTime instanceof Function);
  }

  /**
   * Check whether the time engine implements the transported interface
   **/
  function implementsTransported$get$0() {
    return (
      this.syncPosition && this.syncPosition instanceof Function &&
      this.advancePosition && this.advancePosition instanceof Function
    );
  }

  /**
   * Check whether the time engine implements the speed-controlled interface
   **/
  function implementsSpeedControlled$get$0() {
    return (this.syncSpeed && this.syncSpeed instanceof Function);
  }

  /**
   * Get the time engine's current master time
   * @type {Function}
   *
   * This function provided by the master.
   */
  function currentTime$get$0() {
    return audioContext.currentTime;
  }

  /**
   * Get the time engine's current master position
   * @type {Function}
   *
   * This function provided by the master.
   */
  function currentPosition$get$0() {
    return 0;
  };

  /**
   * Advance engine time (scheduled interface)
   * @param {Number} time current scheduler time (based on audio time)
   * @return {Number} next engine time
   *
   * This function is called by the scheduler to let the engine do its work
   * synchronized to the scheduler time.
   * If the engine returns Infinity, it is not called again until it is restarted by
   * the scheduler or it calls resyncEnginePosition() with a valid position.
   */
  // advanceTime(time) {
  //   return time;
  // }

  /**
   * Function provided by the scheduler to reset the engine's next time
   * @param {Number} time new engine time (immediately if not specified)
   */
  $proto$0.resetEngineTime = function(time) {};

  /**
   * Synchronize engine to transport position (transported interface)
   * @param {Number} position current transport position to synchronize to
   * @param {Number} time current scheduler time (based on audio time)
   * @param {Number} speed current speed
   * @return {Number} next position (given the playing direction)
   *
   * This function is called by the msater and allows the engine for synchronizing
   * (seeking) to the current transport position and to return its next position.
   * If the engine returns Infinity or -Infinity, it is not called again until it is
   * resynchronized by the transport or it calls resyncEnginePosition().
   */
  // syncPosition(time, position, speed) {
  //   return position;
  // }

  /**
   * Advance engine position (transported interface)
   * @param {Number} time current scheduler time (based on audio time)
   * @param {Number} position current transport position
   * @param {Number} speed current speed
   * @return {Number} next engine position (given the playing direction)
   *
   * This function is called by the transport to let the engine do its work
   * aligned to the transport's position.
   * If the engine returns Infinity or -Infinity, it is not called again until it is
   * resynchronized by the transport or it calls resyncEnginePosition().
   */
  // advancePosition(time, position, speed) {
  //   return position;
  // }

  /**
   * Function provided by the transport to request resynchronizing the engine's position
   * @param {Number} time new engine time (immediately if not specified)
   */
  $proto$0.resyncEnginePosition = function() {};;

  /**
   * Set engine speed (speed-controlled interface)
   * @param {Number} time current scheduler time (based on audio time)
   * @param {Number} position current transport position
   * @param {Number} speed current transport speed
   *
   * This function is called by the transport to propagate the transport speed to the engine.
   * The speed can be of any bewteen -16 and 16.
   * With a speed of 0 the engine is halted.
   */
  // syncSpeed(time, position, speed) {
  // }

  $proto$0.__setGetters = function(getCurrentTime, getCurrentPosition) {
    if (getCurrentTime) {
      Object.defineProperty(this, 'currentTime', {
        configurable: true,
        get: getCurrentTime,
        set: function(time) {}
      });
    }

    if (getCurrentPosition) {
      Object.defineProperty(this, 'currentPosition', {
        configurable: true,
        get: getCurrentPosition,
        set: function(position) {}
      });
    }
  };

  $proto$0.__deleteGetters = function() {
    delete this.currentTime;
    delete this.currentPosition;
  };

  $proto$0.setScheduled = function(scheduler, resetEngineTime, getCurrentTime, getCurrentPosition) {
    this.master = scheduler;
    this.interface = "scheduled";

    this.__setGetters(getCurrentTime, getCurrentPosition);

    if (resetEngineTime)
      this.resetEngineTime = resetEngineTime;
  };

  $proto$0.resetScheduled = function() {
    this.__deleteGetters();

    delete this.resetEngineTime;

    this.master = null;
    this.interface = null;
  };

  $proto$0.setTransported = function(transport, startPosition, resyncEnginePosition, getCurrentTime, getCurrentPosition) {
    this.master = transport;
    this.interface = "transported";

    this.transportStartPosition = startPosition;

    this.__setGetters(getCurrentTime, getCurrentPosition);

    if (resyncEnginePosition)
      this.resyncEnginePosition = resyncEnginePosition;
  };

  $proto$0.resetTransported = function() {
    this.__deleteGetters();

    delete this.resyncEnginePosition;

    this.transportStartPosition = 0;
    this.master = null;
    this.interface = null;
  };

  $proto$0.setSpeedControlled = function(master, getCurrentTime, getCurrentPosition) {
    this.master = master;
    this.interface = "speed-controlled";

    this.__setGetters(getCurrentTime, getCurrentPosition);
  };

  $proto$0.resetSpeedControlled = function() {
    this.__deleteGetters();

    this.master = null;
    this.interface = null;
  };

  /**
   * Remove engine from current master
   */
  $proto$0.removeFromMaster = function() {
    if (this.master)
      this.master.remove(this);
  };

  /**
   * Connect audio node
   * @param {Object} target audio node
   */
  $proto$0.connect = function(target) {
    this.outputNode.connect(target);
    return this;
  };

  /**
   * Disconnect audio node
   * @param {Number} connection connection to be disconnected
   */
  $proto$0.disconnect = function(connection) {
    this.outputNode.disconnect(connection);
    return this;
  };
MIXIN$0(TimeEngine.prototype,$proto$0);$proto$0=void 0;return TimeEngine;})();

module.exports = TimeEngine;
},{"../audio-context":1}],5:[function(_dereq_,module,exports){
/* written in ECMAscript 6 */
/**
 * @fileoverview WAVE audio transport class, provides synchronized scheduling of time engines
 * @author Norbert.Schnell@ircam.fr, Victor.Saiz@ircam.fr, Karim.Barkati@ircam.fr *
 */
'use strict';var PRS$0 = (function(o,t){o["__proto__"]={"a":t};return o["a"]===t})({},{});var DP$0 = Object.defineProperty;var GOPD$0 = Object.getOwnPropertyDescriptor;var MIXIN$0 = function(t,s){for(var p in s){if(s.hasOwnProperty(p)){DP$0(t,p,GOPD$0(s,p));}}return t};

var TimeEngine = _dereq_("../time-engine");
var PriorityQueue = _dereq_("../priority-queue");
var scheduler = _dereq_("../scheduler");

function arrayRemove(array, value) {
  var index = array.indexOf(value);

  if (index >= 0) {
    array.splice(index, 1);
    return true;
  }

  return false;
}

// ScheduledAdapter has to switch on and off a scheduled engine 
// when the transport hits the engine's start and end position
var ScheduledAdapter = (function(){
  function ScheduledAdapter(engine) {
    this.engine = engine;
  }DP$0(ScheduledAdapter,"prototype",{"configurable":false,"enumerable":false,"writable":false});
;return ScheduledAdapter;})();

// ScheduledAdapter has to start and stop a speed-controlled engine 
// when the transport hits the engine's start and end position
var SpeedControlledAdapter = (function(){
  function SpeedControlledAdapter(engine) {
    this.engine = engine;
  }DP$0(SpeedControlledAdapter,"prototype",{"configurable":false,"enumerable":false,"writable":false});
;return SpeedControlledAdapter;})();

var Transport = (function(super$0){var SP$0 = Object.setPrototypeOf||function(o,p){o["__proto__"]=p;return o};var OC$0 = Object.create;if(!PRS$0)MIXIN$0(Transport, super$0);var proto$0={};var S_ITER$0 = typeof Symbol!=='undefined'&&Symbol&&Symbol.iterator||'@@iterator';var S_MARK$0 = typeof Symbol!=='undefined'&&Symbol&&Symbol["__setObjectSetter__"];function GET_ITER$0(v){if(v){if(Array.isArray(v))return 0;var f;if(S_MARK$0)S_MARK$0(v);if(typeof v==='object'&&typeof (f=v[S_ITER$0])==='function'){if(S_MARK$0)S_MARK$0(void 0);return f.call(v);}if(S_MARK$0)S_MARK$0(void 0);if((v+'')==='[object Generator]')return v;}throw new Error(v+' is not iterable')};
  function Transport() {
    super$0.call(this);

    this.__queue = new PriorityQueue();
    this.__transportedEngines = [];
    this.__speedControlledEngines = [];
    this.__scheduledEngines = [];

    this.__time = 0;
    this.__position = 0;
    this.__speed = 0;

    this.__nextTime = Infinity;
    this.__nextPosition = Infinity;

    this.__playingSpeed = 1;
  }if(super$0!==null)SP$0(Transport,super$0);Transport.prototype = OC$0(super$0!==null?super$0.prototype:null,{"constructor":{"value":Transport,"configurable":true,"writable":true}, numEngines: {"get": numEngines$get$0, "configurable":true,"enumerable":true}, currentTime: {"get": currentTime$get$0, "configurable":true,"enumerable":true}, currentPosition: {"get": currentPosition$get$0, "configurable":true,"enumerable":true}, speed: {"get": speed$get$0, "set": speed$set$0, "configurable":true,"enumerable":true}});DP$0(Transport,"prototype",{"configurable":false,"enumerable":false,"writable":false});

  proto$0.__sync = function(time) {
    var now = time || this.currentTime;
    this.__position += (now - this.__time) * this.__speed;
    this.__time = now;
    return now;
  };

  proto$0.__resyncTransportedEngines = function() {
    var numTransportedEngines = this.__transportedEngines.length;
    var nextPosition = Infinity;

    if (numTransportedEngines > 0) {
      var time = this.__time;
      var position = this.__position;
      var speed = this.__speed;
      var engine, nextEnginePosition;

      this.__queue.clear();
      this.__queue.reverse = (speed < 0);

      for (var i = numTransportedEngines - 1; i > 0; i--) {
        engine = this.__transportedEngines[i];
        nextEnginePosition = engine.transportStartPosition + engine.syncPosition(time, position - engine.transportStartPosition, speed);
        this.__queue.insert(engine, nextEnginePosition, false); // insert but don't sort
      }

      engine = this.__transportedEngines[0];
      nextEnginePosition = engine.transportStartPosition + engine.syncPosition(time, position - engine.transportStartPosition, speed);
      nextPosition = this.__queue.insert(engine, nextEnginePosition, true); // insert and sort
    }

    return nextPosition;
  };

  proto$0.__rescheduleAccordingToPosition = function(nextPosition) {
    var nextTime = this.getTimeAtPosition(nextPosition);

    if (nextTime !== this.__nextTime) {
      if (nextTime === Infinity)
        scheduler.remove(this);
      else if (!this.master)
        scheduler.add(this, nextTime - scheduler.currentTime, "its me!");
      else
        this.resetEngineTime(nextTime);

      this.__nextTime = nextTime
    }

    this.__nextPosition = nextPosition;
  };

  function numEngines$get$0() {
    return this.__transportedEngines.length + this.__speedControlledEngines.length + this.__scheduledEngines.length;
  }

  // TimeEngine method scheduled interface)
  proto$0.advanceTime = function(time) {
    this.__sync(time);

    var nextEngine = this.__queue.head;
    var nextEnginePosition = nextEngine.transportStartPosition + nextEngine.advancePosition(time, this.__position - nextEngine.transportStartPosition, this.__speed);
    var nextPosition = this.__queue.move(nextEngine, nextEnginePosition);
    var nextTime = this.getTimeAtPosition(nextPosition);
    this.__nextTime = nextTime

    return nextTime;
  };

  // TimeEngine method (transported interface)
  proto$0.syncPosition = function(time, position, speed) {var $D$0;var $D$1;var $D$2;var $D$3;
    this.__time = time;
    this.__position = position;
    this.__speed = speed;

    $D$3 = (this.__speedControlledEngines);$D$0 = GET_ITER$0($D$3);$D$2 = $D$0 === 0;$D$1 = ($D$2 ? $D$3.length : void 0);for (var speedControlledEngine ;$D$2 ? ($D$0 < $D$1) : !($D$1 = $D$0["next"]())["done"];){speedControlledEngine = ($D$2 ? $D$3[$D$0++] : $D$1["value"]);
      speedControlledEngine.syncSpeed(time, position, 0);
      speedControlledEngine.syncSpeed(time, position, speed);
    };$D$0 = $D$1 = $D$2 = $D$3 = void 0;

    var nextPosition = this.__resetAllEngines(time, position);
    this.__nextPosition = nextPosition;

    return nextPosition;
  };

  // TimeEngine method (transported interface)
  proto$0.advancePosition = function(time, position, speed) {
    this.__time = time;
    this.__position = position;
    this.__speed = speed;

    var nextEngine = this.__queue.head;
    var nextEnginePosition = nextEngine.advancePosition(position, time, speed);
    var nextPosition = this.__queue.move(nextEngine, nextEnginePosition);

    this.__nextPosition = nextPosition;

    return nextPosition;
  };

  // TimeEngine method (speed-controlled interface)
  proto$0.syncSpeed = function(time, position, speed) {var $D$4;var $D$5;var $D$6;var $D$7;
    if (this.interface !== "transported") {
      var lastSpeed = this.__speed;

      if (speed !== lastSpeed) {
        this.__speed = speed;

        var nextPosition = this.__nextPosition;
        var scheduledEngine;

        if (lastSpeed === 0) {
          // reset all engines when start or reverse direction
          nextPosition = this.__resyncTransportedEngines();

          // start scheduled engines
          $D$7 = (this.__scheduledEngines);$D$4 = GET_ITER$0($D$7);$D$6 = $D$4 === 0;$D$5 = ($D$6 ? $D$7.length : void 0);for (scheduledEngine ;$D$6 ? ($D$4 < $D$5) : !($D$5 = $D$4["next"]())["done"];)
{scheduledEngine = ($D$6 ? $D$7[$D$4++] : $D$5["value"]);scheduledEngine.resetEngineTime(0);};$D$4 = $D$5 = $D$6 = $D$7 = void 0;
        } else if (speed === 0) {
          nextPosition = Infinity;

          // stop scheduled engines
          $D$7 = (this.__scheduledEngines);$D$4 = GET_ITER$0($D$7);$D$6 = $D$4 === 0;$D$5 = ($D$6 ? $D$7.length : void 0);for (scheduledEngine ;$D$6 ? ($D$4 < $D$5) : !($D$5 = $D$4["next"]())["done"];)
{scheduledEngine = ($D$6 ? $D$7[$D$4++] : $D$5["value"]);scheduledEngine.resetEngineTime(Infinity);};$D$4 = $D$5 = $D$6 = $D$7 = void 0;
        } else if (speed * lastSpeed < 0) {
          nextPosition = this.__resyncTransportedEngines();
        }

        this.__rescheduleAccordingToPosition(nextPosition);

        $D$7 = (this.__speedControlledEngines);$D$4 = GET_ITER$0($D$7);$D$6 = $D$4 === 0;$D$5 = ($D$6 ? $D$7.length : void 0);for (var speedControlledEngine ;$D$6 ? ($D$4 < $D$5) : !($D$5 = $D$4["next"]())["done"];)
{speedControlledEngine = ($D$6 ? $D$7[$D$4++] : $D$5["value"]);speedControlledEngine.syncSpeed(time, position, speed);};$D$4 = $D$5 = $D$6 = $D$7 = void 0;
      }
    } else {
      throw new Error("no scheduler");
    }
  };

  /**
   * Extrapolate transport time for given position
   * @param {Number} position position
   * @return {Number} extrapolated time
   */
  proto$0.getTimeAtPosition = function(position) {
    return this.__time + (position - this.__position) / this.__speed;
  };

  /**
   * Extrapolate transport position for given time
   * @param {Number} time time
   * @return {Number} extrapolated position
   */
  proto$0.getPositionAtTime = function(time) {
    return this.__position + (time - this.__time) * this.__speed;
  };

  /**
   * Get current master time
   * @return {Number} current transport position
   */
  function currentTime$get$0() {
    return scheduler.currentTime;
  }

  /**
   * Get current master position
   * @return {Number} current transport position
   */
  function currentPosition$get$0() {
    return this.getPositionAtTime(this.currentTime);
  }

  /**
   * Start playing (high level player API)
   */
  proto$0.start = function() {
    var time = this.__sync();
    this.syncSpeed(time, this.__position, this.__playingSpeed);
  };

  /**
   * Pause playing (high level player API)
   */
  proto$0.pause = function() {
    var time = this.__sync();
    this.syncSpeed(time, this.__position, 0);
  };

  /**
   * Stop playing (high level player API)
   */
  proto$0.stop = function() {
    var time = this.__sync();
    this.syncSpeed(time, this.__position, 0);
    this.seek(0);
  };

  /**
   * Set playing speed (high level player API)
   * @param {Number} speed playing speed (non-zero speed between -16 and -1/16 or between 1/16 and 16)
   */
  function speed$set$0(speed) {
    var time = this.__sync();

    if (speed >= 0) {
      if (speed < 0.0625)
        speed = 0.0625;
      else if (speed > 16)
        speed = 16;
    } else {
      if (speed < -16)
        speed = -16
      else if (speed > -0.0625)
        speed = -0.0625;
    }

    this.__playingSpeed = speed;

    if (this.__speed !== 0)
      this.syncSpeed(time, this.__position, speed);
  }

  /**
   * Get playing speed (high level player API)
   * @return current playing speed
   */
  function speed$get$0() {
    return this.__playingSpeed;
  }

  /**
   * Set (jump to) transport position
   * @param {Number} position target position
   */
  proto$0.seek = function(position) {var $D$8;var $D$9;var $D$10;var $D$11;
    if (position !== this.__position) {
      var time = this.__sync();
      var speed = this.__speed;

      if (speed !== 0) {
        var nextPosition = this.__resyncTransportedEngines();
        this.__rescheduleAccordingToPosition(nextPosition);

        $D$11 = (this.__speedControlledEngines);$D$8 = GET_ITER$0($D$11);$D$10 = $D$8 === 0;$D$9 = ($D$10 ? $D$11.length : void 0);for (var speedControlledEngine ;$D$10 ? ($D$8 < $D$9) : !($D$9 = $D$8["next"]())["done"];){speedControlledEngine = ($D$10 ? $D$11[$D$8++] : $D$9["value"]);
          speedControlledEngine.syncSpeed(time, this.__position, 0);
          speedControlledEngine.syncSpeed(time, position, speed);
        };$D$8 = $D$9 = $D$10 = $D$11 = void 0;
      }

      this.__position = position;
    }
  };

  /**
   * Add a time engine to the transport
   * @param {Object} engine engine to be added to the transport
   * @param {Number} position start position
   */
  proto$0.add = function(engine) {var startPosition = arguments[1];if(startPosition === void 0)startPosition = 0;var this$0 = this;
    if (!engine.master) {
      var time = this.__sync();
      var speed = this.__speed;

      var getCurrentTime = function()  {
        return this$0.currentTime;
      };

      var getCurrentPosition = function()  {
        return this$0.currentPosition - startPosition;
      };

      if (engine.implementsTransported) {
        // add time engine with transported interface
        this.__transportedEngines.push(engine);

        engine.setTransported(this, startPosition, function()  {
          // resyncEnginePosition
          var time = this$0.__sync();
          var speed = this$0.__speed;
          if (speed !== 0) {
            var nextEnginePosition = engine.transportStartPosition + engine.syncPosition(time, this$0.__position - engine.transportStartPosition, speed);
            var nextPosition = this$0.__queue.move(engine, nextEnginePosition);
            this$0.__rescheduleAccordingToPosition(nextPosition);
          }
        }, getCurrentTime, getCurrentPosition);

        if (speed !== 0) {
          // sync and start
          var nextEnginePosition = engine.transportStartPosition + engine.syncPosition(time, this.__position - engine.transportStartPosition, speed);
          var nextPosition = this.__queue.insert(engine, nextEnginePosition);
          this.__rescheduleAccordingToPosition(nextPosition);
        }
      } else if (engine.implementsSpeedControlled) {
        // add time engine with speed-controlled interface
        this.__speedControlledEngines.push(engine);

        engine.setSpeedControlled(this, getCurrentTime, getCurrentPosition);
        engine.syncSpeed(time, this.__position, speed);
      } else if (engine.implementsScheduled) {
        // add time engine with scheduled interface
        this.__scheduledEngines.push(engine);

        var delay = (this.__speed !== 0) ? 0 : Infinity;
        scheduler.add(engine, delay, getCurrentPosition);
      } else {
        throw new Error("object cannot be added to transport");
      }
    } else {
      throw new Error("object has already been added to a master");
    }
  };

  /**
   * Remove a time engine from the transport
   * @param {object} engine engine to be removed from the transport
   */
  proto$0.remove = function(engine) {
    var time = this.__sync();
    
    if (engine.implementsTransported && arrayRemove(this.__transportedEngines, engine)) {
      // remove engine with transported interface
      var nextPosition = this.__queue.remove(engine);

      if (this.__speed !== 0)
        this.__rescheduleAccordingToPosition(nextPosition);

      engine.resetTransported();
    } else if (engine.implementsSpeedControlled && arrayRemove(this.__speedControlledEngines, engine)) {
      // remove engine with speed-controlled interface
      engine.syncSpeed(time, this.__position, 0);

      engine.resetSpeedControlled();
    } else if (engine.implementsScheduled && arrayRemove(this.__scheduledEngines, engine)) {
      // remove engine with scheduled interface
      scheduler.remove(engine);

      engine.resetScheduled();
    } else {
      throw new Error("object has not been added to this transport");
    }
  };

  /**
   * Remove all time engines from the transport
   */
  proto$0.clear = function() {var $D$12;var $D$13;var $D$14;var $D$15;
    var time = this.__sync();

    if (this.interface === "scheduled" || this.interface === "speed-controlled")
      {this.syncSpeed(time, this.__position, 0);}

    $D$15 = (this.__transportedEngines);$D$12 = GET_ITER$0($D$15);$D$14 = $D$12 === 0;$D$13 = ($D$14 ? $D$15.length : void 0);for (var transportedEngine ;$D$14 ? ($D$12 < $D$13) : !($D$13 = $D$12["next"]())["done"];)
{transportedEngine = ($D$14 ? $D$15[$D$12++] : $D$13["value"]);transportedEngine.resetTransported();};$D$12 = $D$13 = $D$14 = $D$15 = void 0;

    $D$15 = (this.__speedControlledEngines);$D$12 = GET_ITER$0($D$15);$D$14 = $D$12 === 0;$D$13 = ($D$14 ? $D$15.length : void 0);for (var speedControlledEngine ;$D$14 ? ($D$12 < $D$13) : !($D$13 = $D$12["next"]())["done"];)
{speedControlledEngine = ($D$14 ? $D$15[$D$12++] : $D$13["value"]);speedControlledEngine.resetSpeedControlled();};$D$12 = $D$13 = $D$14 = $D$15 = void 0;

    $D$15 = (this.__scheduledEngines);$D$12 = GET_ITER$0($D$15);$D$14 = $D$12 === 0;$D$13 = ($D$14 ? $D$15.length : void 0);for (var scheduledEngine ;$D$14 ? ($D$12 < $D$13) : !($D$13 = $D$12["next"]())["done"];)
{scheduledEngine = ($D$14 ? $D$15[$D$12++] : $D$13["value"]);scheduledEngine.resetScheduled();};$D$12 = $D$13 = $D$14 = $D$15 = void 0;

    this.__transportedEngines.length = 0;
    this.__speedControlledEngines.length = 0;
    this.__scheduledEngines.length = 0;

    if (this.interface === "transported")
      this.resyncEnginePosition();
  };

  proto$0.setScheduled = function(scheduler, resetEngineTime, getCurrentTime, getCurrentPosition) {
    // make sure that the transport added itself to the scheduler
    if (getCurrentPosition === "its me!")
      super$0.prototype.setScheduled.call(this, scheduler, resetEngineTime, getCurrentTime, null);
    else
      throw new Error("Transport cannot be added to scheduler");
  };
MIXIN$0(Transport.prototype,proto$0);proto$0=void 0;return Transport;})(TimeEngine);

module.exports = Transport;
},{"../priority-queue":2,"../scheduler":3,"../time-engine":4}]},{},[5])
(5)
});