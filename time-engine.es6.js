/* written in ECMAscript 6 */
/**
 * @fileoverview WAVE audio time engine base class
 * @author Norbert.Schnell@ircam.fr, Victor.Saiz@ircam.fr, Karim.Barkati@ircam.fr
 */
"use strict";

var audioContext = require("audio-context");

/**
 * @class TimeEngine
 * @classdesc Base class for time engines
 *
 * Time engines are components that generate more or less regular audio events and/or playback a media stream.
 * They implement one or multiple interfaces to be synchronized by a master such as a scheduler, a transport or a play-control.
 * The provided interfaces are "scheduled", "transported", and "play-controlled".
 *
 * In the "scheduled" interface the engine implements a method "advanceTime" that is called by the master (usually the scheduler)
 * and returns the delay until the next call of "advanceTime". The master provides the engine with a function "resetNextTime"
 * to reschedule the next call to another time.
 *
 * In the "transported" interface the master (usually a transport) first calls the method "syncPosition" that returns the position
 * of the first event generated by the engine regarding the playing direction (sign of the speed argument). Events are generated
 * through the method "advancePosition" that returns the position of the next event generated through "advancePosition".
 *
 * In the "speed-controlled" interface the engine is controlled by the method "syncSpeed".
 *
 * For all interfaces the engine is provided with the attribute getters "currentTime" and "currentPosition" (for the case that the master
 * does not implement these attribute getters, the base class provides default implementations).
 */
class TimeEngine {

  /**
   * @constructor
   */
  constructor() {

    /**
     * Interface currently used
     * @type {String}
     */
    this.interface = null;

    /**
     * Output audio node
     * @type {Object}
     */
    this.outputNode = null;
  }

  /**
   * Get the time engine's current master time
   * @type {Function}
   *
   * This function provided by the master.
   */
  get currentTime() {
    return audioContext.currentTime;
  }

  /**
   * Get the time engine's current master position
   * @type {Function}
   *
   * This function provided by the master.
   */
  get currentPosition() {
    return 0;
  }

  /**
   * Function provided by the scheduler to reset the engine's next time
   * @param {Number} time new engine time (immediately if not specified)
   */
  resetNextTime(time = null) {}

  /**
   * Function provided by the transport to reset the next position or to request resynchronizing the engine's position
   * @param {Number} position new engine position (will call syncPosition with the current position if not specified)
   */
  resetNextPosition(position = null) {}

  __setGetters(getCurrentTime, getCurrentPosition) {
    if (getCurrentTime) {
      Object.defineProperty(this, 'currentTime', {
        configurable: true,
        get: getCurrentTime
      });
    }

    if (getCurrentPosition) {
      Object.defineProperty(this, 'currentPosition', {
        configurable: true,
        get: getCurrentPosition
      });
    }
  }

  __deleteGetters() {
    delete this.currentTime;
    delete this.currentPosition;
  }

  /**
   * Connect audio node
   * @param {Object} target audio node
   */
  connect(target) {
    this.outputNode.connect(target);
    return this;
  }

  /**
   * Disconnect audio node
   * @param {Number} connection connection to be disconnected
   */
  disconnect(connection) {
    this.outputNode.disconnect(connection);
    return this;
  }
}

/**
 * Check whether the time engine implements the scheduled interface
 **/
TimeEngine.implementsScheduled = function(engine) {
  return (engine.advanceTime && engine.advanceTime instanceof Function);
};

/**
 * Check whether the time engine implements the transported interface
 **/
TimeEngine.implementsTransported = function(engine) {
  return (
    engine.syncPosition && engine.syncPosition instanceof Function &&
    engine.advancePosition && engine.advancePosition instanceof Function
  );
};

/**
 * Check whether the time engine implements the speed-controlled interface
 **/
TimeEngine.implementsSpeedControlled = function(engine) {
  return (engine.syncSpeed && engine.syncSpeed instanceof Function);
};

TimeEngine.setScheduled = function(engine, resetNextTime, getCurrentTime, getCurrentPosition) {
  engine.interface = "scheduled";
  engine.__setGetters(getCurrentTime, getCurrentPosition);
  if (resetNextTime)
    engine.resetNextTime = resetNextTime;
};

TimeEngine.setTransported = function(engine, resetNextPosition, getCurrentTime, getCurrentPosition) {
  engine.interface = "transported";
  engine.__setGetters(getCurrentTime, getCurrentPosition);
  if (resetNextPosition)
    engine.resetNextPosition = resetNextPosition;
};

TimeEngine.setSpeedControlled = function(engine, getCurrentTime, getCurrentPosition) {
  engine.interface = "speed-controlled";
  engine.__setGetters(getCurrentTime, getCurrentPosition);
};

TimeEngine.resetInterface = function(engine) {
  engine.__deleteGetters();
  delete engine.resetNextTime;
  delete engine.resetNextPosition;
  engine.interface = null;
};

module.exports = TimeEngine;
